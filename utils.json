{
  "format_version": "1.0",
  "provider_schemas": {
    "registry.terraform.io/cloudposse/utils": {
      "provider": {
        "version": 0,
        "block": {
          "description_kind": "plain"
        }
      },
      "data_source_schemas": {
        "utils_aws_eks_update_kubeconfig": {
          "version": 0,
          "block": {
            "attributes": {
              "alias": {
                "type": "string",
                "description": "Alias for the cluster context name. Defaults to match cluster ARN.",
                "description_kind": "markdown",
                "optional": true
              },
              "cluster_name": {
                "type": "string",
                "description": "EKS cluster name.",
                "description_kind": "markdown",
                "optional": true
              },
              "component": {
                "type": "string",
                "description": "Component name.",
                "description_kind": "markdown",
                "optional": true
              },
              "env": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "Map of ENV vars in the format 'key=value'. These ENV vars will be set before executing the data source",
                "description_kind": "markdown",
                "optional": true
              },
              "environment": {
                "type": "string",
                "description": "Environment.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "kubeconfig": {
                "type": "string",
                "description": "kubeconfig file path to write the kubeconfig to. By default, the configuration is written to the first file path in the KUBECONFIG environment variable (if it is set) or the default kubeconfig path (.kube/config) in your home directory",
                "description_kind": "markdown",
                "optional": true
              },
              "output": {
                "type": "string",
                "description": "Output.",
                "description_kind": "markdown",
                "computed": true
              },
              "profile": {
                "type": "string",
                "description": "AWS profile to use for cluster authentication.",
                "description_kind": "markdown",
                "optional": true
              },
              "region": {
                "type": "string",
                "description": "AWS region.",
                "description_kind": "markdown",
                "optional": true
              },
              "role_arn": {
                "type": "string",
                "description": "IAM role to assume for cluster authentication.",
                "description_kind": "markdown",
                "optional": true
              },
              "stack": {
                "type": "string",
                "description": "Stack name.",
                "description_kind": "markdown",
                "optional": true
              },
              "stage": {
                "type": "string",
                "description": "Stage.",
                "description_kind": "markdown",
                "optional": true
              },
              "tenant": {
                "type": "string",
                "description": "Tenant.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The 'aws_eks_update_kubeconfig' data source executes 'aws eks update-kubeconfig' commands",
            "description_kind": "markdown"
          }
        },
        "utils_component_config": {
          "version": 0,
          "block": {
            "attributes": {
              "atmos_base_path": {
                "type": "string",
                "description": "atmos base path to components and stacks.",
                "description_kind": "markdown",
                "optional": true
              },
              "atmos_cli_config_path": {
                "type": "string",
                "description": "atmos CLI config path.",
                "description_kind": "markdown",
                "optional": true
              },
              "component": {
                "type": "string",
                "description": "Component name.",
                "description_kind": "markdown",
                "required": true
              },
              "env": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "Map of ENV vars in the format 'key=value'. These ENV vars will be set before executing the data source",
                "description_kind": "markdown",
                "optional": true
              },
              "environment": {
                "type": "string",
                "description": "Environment.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "ignore_errors": {
                "type": "bool",
                "description": "Flag to ignore errors if the component is not found in the stack.",
                "description_kind": "markdown",
                "optional": true
              },
              "namespace": {
                "type": "string",
                "description": "Namespace.",
                "description_kind": "markdown",
                "optional": true
              },
              "output": {
                "type": "string",
                "description": "Component configuration.",
                "description_kind": "markdown",
                "computed": true
              },
              "stack": {
                "type": "string",
                "description": "Stack name.",
                "description_kind": "markdown",
                "optional": true
              },
              "stage": {
                "type": "string",
                "description": "Stage.",
                "description_kind": "markdown",
                "optional": true
              },
              "tenant": {
                "type": "string",
                "description": "Tenant.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `component_config` data source accepts a component and a stack name and returns the component configuration in the stack",
            "description_kind": "markdown"
          }
        },
        "utils_deep_merge_json": {
          "version": 0,
          "block": {
            "attributes": {
              "append_list": {
                "type": "bool",
                "description": "A boolean flag to enable/disable appending lists instead of overwriting them.",
                "description_kind": "markdown",
                "optional": true
              },
              "deep_copy_list": {
                "type": "bool",
                "description": "A boolean flag to enable/disable merging of list elements one by one.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "input": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "A list of JSON strings that is deep merged into the `output` attribute.",
                "description_kind": "markdown",
                "required": true
              },
              "output": {
                "type": "string",
                "description": "The deep-merged output.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `deep_merge_json` data source accepts a list of JSON strings as input and deep merges into a single JSON string as output.",
            "description_kind": "markdown"
          }
        },
        "utils_deep_merge_yaml": {
          "version": 0,
          "block": {
            "attributes": {
              "append_list": {
                "type": "bool",
                "description": "A boolean flag to enable/disable appending lists instead of overwriting them.",
                "description_kind": "markdown",
                "optional": true
              },
              "deep_copy_list": {
                "type": "bool",
                "description": "A boolean flag to enable/disable merging of list elements one by one.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "input": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "A list of YAML strings that is deep merged into the `output` attribute.",
                "description_kind": "markdown",
                "required": true
              },
              "output": {
                "type": "string",
                "description": "The deep-merged output.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `deep_merge_yaml` data source accepts a list of YAML strings as input and deep merges into a single YAML string as output.",
            "description_kind": "markdown"
          }
        },
        "utils_describe_stacks": {
          "version": 0,
          "block": {
            "attributes": {
              "atmos_base_path": {
                "type": "string",
                "description": "Atmos base path to components and stacks.",
                "description_kind": "markdown",
                "optional": true
              },
              "atmos_cli_config_path": {
                "type": "string",
                "description": "Atmos CLI config path.",
                "description_kind": "markdown",
                "optional": true
              },
              "component_types": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "List of component types to filter by.",
                "description_kind": "markdown",
                "optional": true
              },
              "components": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "List of Atmos components to filter by.",
                "description_kind": "markdown",
                "optional": true
              },
              "env": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "Map of ENV vars in the format 'key=value'. These ENV vars will be set before executing the data source",
                "description_kind": "markdown",
                "optional": true
              },
              "environment": {
                "type": "string",
                "description": "Environment to filter by.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "ignore_errors": {
                "type": "bool",
                "description": "Flag to ignore errors in the provider when executing 'describe stacks' command.",
                "description_kind": "markdown",
                "optional": true
              },
              "namespace": {
                "type": "string",
                "description": "Namespace to filter by.",
                "description_kind": "markdown",
                "optional": true
              },
              "output": {
                "type": "string",
                "description": "Stack configurations.",
                "description_kind": "markdown",
                "computed": true
              },
              "sections": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Output only the specified component sections.",
                "description_kind": "markdown",
                "optional": true
              },
              "stack": {
                "type": "string",
                "description": "Atmos stack to filter by.",
                "description_kind": "markdown",
                "optional": true
              },
              "stage": {
                "type": "string",
                "description": "Stage to filter by.",
                "description_kind": "markdown",
                "optional": true
              },
              "tenant": {
                "type": "string",
                "description": "Tenant to filter by.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `describe_stacks` data source shows configuration for Atmos stacks and components in the stacks",
            "description_kind": "markdown"
          }
        },
        "utils_spacelift_stack_config": {
          "version": 0,
          "block": {
            "attributes": {
              "base_path": {
                "type": "string",
                "description": "Stack config base path.",
                "description_kind": "markdown",
                "optional": true
              },
              "env": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "Map of ENV vars in the format 'key=value'. These ENV vars will be set before executing the data source",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "input": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "A list of stack config file names.",
                "description_kind": "markdown",
                "optional": true
              },
              "output": {
                "type": "string",
                "description": "A map of Spacelift stack configurations.",
                "description_kind": "markdown",
                "computed": true
              },
              "process_component_deps": {
                "type": "bool",
                "description": "A boolean flag to enable/disable processing config dependencies for the components.",
                "description_kind": "markdown",
                "optional": true
              },
              "process_imports": {
                "type": "bool",
                "description": "A boolean flag to enable/disable processing stack imports.",
                "description_kind": "markdown",
                "optional": true
              },
              "process_stack_deps": {
                "type": "bool",
                "description": "A boolean flag to enable/disable processing all stack dependencies for the components.",
                "description_kind": "markdown",
                "optional": true
              },
              "stack_config_path_template": {
                "type": "string",
                "description": "Stack config path template.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `spacelift_stack_config` data source accepts a list of stack config file names and returns a map of Spacelift stack configurations.",
            "description_kind": "markdown"
          }
        },
        "utils_stack_config_yaml": {
          "version": 0,
          "block": {
            "attributes": {
              "base_path": {
                "type": "string",
                "description": "Stack config base path.",
                "description_kind": "markdown",
                "optional": true
              },
              "env": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "Map of ENV vars in the format 'key=value'. These ENV vars will be set before executing the data source",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "input": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "A list of stack config file names.",
                "description_kind": "markdown",
                "required": true
              },
              "output": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "A list of stack configurations.",
                "description_kind": "markdown",
                "computed": true
              },
              "process_component_deps": {
                "type": "bool",
                "description": "A boolean flag to enable/disable processing config dependencies for the components.",
                "description_kind": "markdown",
                "optional": true
              },
              "process_stack_deps": {
                "type": "bool",
                "description": "A boolean flag to enable/disable processing all stack dependencies for the components.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `stack_config_yaml` data source accepts a list of stack config file names and returns a list of stack configurations.",
            "description_kind": "markdown"
          }
        }
      }
    }
  }
}
