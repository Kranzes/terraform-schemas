{
  "format_version": "1.0",
  "provider_schemas": {
    "registry.terraform.io/hashicorp/http": {
      "provider": {
        "version": 0,
        "block": {
          "description_kind": "plain"
        }
      },
      "data_source_schemas": {
        "http": {
          "version": 0,
          "block": {
            "attributes": {
              "body": {
                "type": "string",
                "description": "The response body returned as a string. **NOTE**: This is deprecated, use `response_body` instead.",
                "description_kind": "plain",
                "deprecated": true,
                "computed": true
              },
              "ca_cert_pem": {
                "type": "string",
                "description": "Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.",
                "description_kind": "plain",
                "optional": true
              },
              "id": {
                "type": "string",
                "description": "The URL used for the request.",
                "description_kind": "plain",
                "computed": true
              },
              "insecure": {
                "type": "bool",
                "description": "Disables verification of the server's certificate chain and hostname. Defaults to `false`",
                "description_kind": "plain",
                "optional": true
              },
              "method": {
                "type": "string",
                "description": "The HTTP Method for the request. Allowed methods are a subset of methods defined in [RFC7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3) namely, `GET`, `HEAD`, and `POST`. `POST` support is only intended for read-only URLs, such as submitting a search.",
                "description_kind": "plain",
                "optional": true
              },
              "request_body": {
                "type": "string",
                "description": "The request body as a string.",
                "description_kind": "plain",
                "optional": true
              },
              "request_headers": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "A map of request header field names and values.",
                "description_kind": "plain",
                "optional": true
              },
              "request_timeout_ms": {
                "type": "number",
                "description": "The request timeout in milliseconds.",
                "description_kind": "plain",
                "optional": true
              },
              "response_body": {
                "type": "string",
                "description": "The response body returned as a string.",
                "description_kind": "plain",
                "computed": true
              },
              "response_body_base64": {
                "type": "string",
                "description": "The response body encoded as base64 (standard) as defined in [RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648#section-4).",
                "description_kind": "plain",
                "computed": true
              },
              "response_headers": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "A map of response header field names and values. Duplicate headers are concatenated according to [RFC2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2).",
                "description_kind": "plain",
                "computed": true
              },
              "status_code": {
                "type": "number",
                "description": "The HTTP response status code.",
                "description_kind": "plain",
                "computed": true
              },
              "url": {
                "type": "string",
                "description": "The URL for the request. Supported schemes are `http` and `https`.",
                "description_kind": "plain",
                "required": true
              }
            },
            "block_types": {
              "retry": {
                "nesting_mode": "single",
                "block": {
                  "attributes": {
                    "attempts": {
                      "type": "number",
                      "description": "The number of times the request is to be retried. For example, if 2 is specified, the request will be tried a maximum of 3 times.",
                      "description_kind": "plain",
                      "optional": true
                    },
                    "max_delay_ms": {
                      "type": "number",
                      "description": "The maximum delay between retry requests in milliseconds.",
                      "description_kind": "plain",
                      "optional": true
                    },
                    "min_delay_ms": {
                      "type": "number",
                      "description": "The minimum delay between retry requests in milliseconds.",
                      "description_kind": "plain",
                      "optional": true
                    }
                  },
                  "description": "Retry request configuration. By default there are no retries. Configuring this block will result in retries if an error is returned by the client (e.g., connection errors) or if a 5xx-range (except 501) status code is received. For further details see [go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).",
                  "description_kind": "plain"
                }
              }
            },
            "description": "\nThe `http` data source makes an HTTP GET request to the given URL and exports\ninformation about the response.\n\nThe given URL may be either an `http` or `https` URL. This resource\nwill issue a warning if the result is not UTF-8 encoded.\n\n~> **Important** Although `https` URLs can be used, there is currently no\nmechanism to authenticate the remote server except for general verification of\nthe server certificate's chain of trust. Data retrieved from servers not under\nyour control should be treated as untrustworthy.\n\nBy default, there are no retries. Configuring the retry block will result in\nretries if an error is returned by the client (e.g., connection errors) or if \na 5xx-range (except 501) status code is received. For further details see \n[go-retryablehttp](https://pkg.go.dev/github.com/hashicorp/go-retryablehttp).\n",
            "description_kind": "plain"
          }
        }
      }
    }
  }
}
