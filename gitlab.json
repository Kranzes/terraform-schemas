{
  "format_version": "1.0",
  "provider_schemas": {
    "registry.terraform.io/gitlabhq/gitlab": {
      "provider": {
        "version": 0,
        "block": {
          "attributes": {
            "base_url": {
              "type": "string",
              "description": "This is the target GitLab base API endpoint. Providing a value is a requirement when working with GitLab CE or GitLab Enterprise e.g. `https://my.gitlab.server/api/v4/`. It is optional to provide this value and it can also be sourced from the `GITLAB_BASE_URL` environment variable. The value must end with a slash.",
              "description_kind": "markdown",
              "optional": true
            },
            "cacert_file": {
              "type": "string",
              "description": "This is a file containing the ca cert to verify the gitlab instance. This is available for use when working with GitLab CE or Gitlab Enterprise with a locally-issued or self-signed certificate chain.",
              "description_kind": "markdown",
              "optional": true
            },
            "client_cert": {
              "type": "string",
              "description": "File path to client certificate when GitLab instance is behind company proxy. File must contain PEM encoded data.",
              "description_kind": "markdown",
              "optional": true
            },
            "client_key": {
              "type": "string",
              "description": "File path to client key when GitLab instance is behind company proxy. File must contain PEM encoded data. Required when `client_cert` is set.",
              "description_kind": "markdown",
              "optional": true
            },
            "early_auth_check": {
              "type": "bool",
              "description": "(Experimental) By default the provider does a dummy request to get the current user in order to verify that the provider configuration is correct and the GitLab API is reachable. Set this to `false` to skip this check. This may be useful if the GitLab instance does not yet exist and is created within the same terraform module. It may be sourced from the `GITLAB_EARLY_AUTH_CHECK`. This is an experimental feature and may change in the future. Please make sure to always keep backups of your state.",
              "description_kind": "markdown",
              "optional": true
            },
            "insecure": {
              "type": "bool",
              "description": "When set to true this disables SSL verification of the connection to the GitLab instance.",
              "description_kind": "markdown",
              "optional": true
            },
            "token": {
              "type": "string",
              "description": "The OAuth2 Token, Project, Group, Personal Access Token or CI Job Token used to connect to GitLab. The OAuth method is used in this provider for authentication (using Bearer authorization token). See https://docs.gitlab.com/ee/api/#authentication for details. It may be sourced from the `GITLAB_TOKEN` environment variable.",
              "description_kind": "markdown",
              "optional": true,
              "sensitive": true
            }
          },
          "description_kind": "plain"
        }
      },
      "resource_schemas": {
        "gitlab_application_settings": {
          "version": 0,
          "block": {
            "attributes": {
              "abuse_notification_email": {
                "type": "string",
                "description": "If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "admin_mode": {
                "type": "bool",
                "description": "Require administrators to enable Admin Mode by re-authenticating for administrative tasks.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "after_sign_out_path": {
                "type": "string",
                "description": "Where to redirect users after logout.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "after_sign_up_text": {
                "type": "string",
                "description": "Text shown to the user after signing up.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "akismet_api_key": {
                "type": "string",
                "description": "API key for Akismet spam protection.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "akismet_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: akismet_api_key) Enable or disable Akismet spam protection.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "allow_group_owners_to_manage_ldap": {
                "type": "bool",
                "description": "Set to true to allow group owners to manage LDAP.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "allow_local_requests_from_system_hooks": {
                "type": "bool",
                "description": "Allow requests to the local network from system hooks.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "allow_local_requests_from_web_hooks_and_services": {
                "type": "bool",
                "description": "Allow requests to the local network from web hooks and services.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "archive_builds_in_human_readable": {
                "type": "string",
                "description": "Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "asset_proxy_allowlist": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "asset_proxy_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: asset_proxy_url) Enable proxying of assets. GitLab restart is required to apply changes.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "asset_proxy_secret_key": {
                "type": "string",
                "description": "Shared secret with the asset proxy server. GitLab restart is required to apply changes.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "asset_proxy_url": {
                "type": "string",
                "description": "URL of the asset proxy server. GitLab restart is required to apply changes.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "authorized_keys_enabled": {
                "type": "bool",
                "description": "By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "auto_devops_domain": {
                "type": "string",
                "description": "Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "auto_devops_enabled": {
                "type": "bool",
                "description": "Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "automatic_purchased_storage_allocation": {
                "type": "bool",
                "description": "Enabling this permits automatic allocation of purchased storage in a namespace.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "check_namespace_plan": {
                "type": "bool",
                "description": "Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "commit_email_hostname": {
                "type": "string",
                "description": "Custom hostname (for private commit emails).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "container_expiration_policies_enable_historic_entries": {
                "type": "bool",
                "description": "Enable cleanup policies for all projects.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "container_registry_cleanup_tags_service_max_list_size": {
                "type": "number",
                "description": "The maximum number of tags that can be deleted in a single execution of cleanup policies.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "container_registry_delete_tags_service_timeout": {
                "type": "number",
                "description": "The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "container_registry_expiration_policies_caching": {
                "type": "bool",
                "description": "Caching during the execution of cleanup policies.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "container_registry_expiration_policies_worker_capacity": {
                "type": "number",
                "description": "Number of workers for cleanup policies.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "container_registry_token_expire_delay": {
                "type": "number",
                "description": "Container Registry token duration in minutes.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "deactivate_dormant_users": {
                "type": "bool",
                "description": "Enable automatic deactivation of dormant users.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_artifacts_expire_in": {
                "type": "string",
                "description": "Set the default expiration time for each job’s artifacts.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_branch_name": {
                "type": "string",
                "description": "Instance-level custom initial branch name (introduced in GitLab 13.2).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_branch_protection": {
                "type": "number",
                "description": "Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_ci_config_path": {
                "type": "string",
                "description": "Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_group_visibility": {
                "type": "string",
                "description": "What visibility level new groups receive. Can take private, internal and public as a parameter. Default is private.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_project_creation": {
                "type": "number",
                "description": "Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_project_visibility": {
                "type": "string",
                "description": "What visibility level new projects receive. Can take private, internal and public as a parameter. Default is private.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_projects_limit": {
                "type": "number",
                "description": "Project limit per user. Default is 100000.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "default_snippet_visibility": {
                "type": "string",
                "description": "What visibility level new snippets receive. Can take private, internal and public as a parameter. Default is private.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "delayed_group_deletion": {
                "type": "bool",
                "description": "Enable delayed group deletion. Default is true. Introduced in GitLab 15.0. From GitLab 15.1, disables and locks the group-level setting for delayed protect deletion when set to false.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "delayed_project_deletion": {
                "type": "bool",
                "description": "Enable delayed project deletion by default in new groups. Default is false. From GitLab 15.1, can only be enabled when delayed_group_deletion is true.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "delete_inactive_projects": {
                "type": "bool",
                "description": "Enable inactive project deletion feature. Default is false. Introduced in GitLab 14.10. Became operational in GitLab 15.0 (with feature flag inactive_projects_deletion, disabled by default).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "deletion_adjourned_period": {
                "type": "number",
                "description": "The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90. Defaults to 7. From GitLab 15.1, a hook on deletion_adjourned_period sets the period to 1 on every update, and sets both delayed_project_deletion and delayed_group_deletion to false if the period is 0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "diff_max_files": {
                "type": "number",
                "description": "Maximum files in a diff.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "diff_max_lines": {
                "type": "number",
                "description": "Maximum lines in a diff.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "diff_max_patch_bytes": {
                "type": "number",
                "description": "Maximum diff patch size, in bytes.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "disable_feed_token": {
                "type": "bool",
                "description": "Disable display of RSS/Atom and calendar feed tokens (introduced in GitLab 13.7).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "disabled_oauth_sign_in_sources": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Disabled OAuth sign-in sources.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "dns_rebinding_protection_enabled": {
                "type": "bool",
                "description": "Enforce DNS rebinding attack protection.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "domain_allowlist": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Force people to use only corporate emails for sign-up. Default is null, meaning there is no restriction.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "domain_denylist": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "domain_denylist_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "dsa_key_restriction": {
                "type": "number",
                "description": "The minimum allowed bit length of an uploaded DSA key. Default is 0 (no restriction). -1 disables DSA keys.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ecdsa_key_restriction": {
                "type": "number",
                "description": "The minimum allowed curve size (in bits) of an uploaded ECDSA key. Default is 0 (no restriction). -1 disables ECDSA keys.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ecdsa_sk_key_restriction": {
                "type": "number",
                "description": "The minimum allowed curve size (in bits) of an uploaded ECDSA_SK key. Default is 0 (no restriction). -1 disables ECDSA_SK keys.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ed25519_key_restriction": {
                "type": "number",
                "description": "The minimum allowed curve size (in bits) of an uploaded ED25519 key. Default is 0 (no restriction). -1 disables ED25519 keys.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ed25519_sk_key_restriction": {
                "type": "number",
                "description": "The minimum allowed curve size (in bits) of an uploaded ED25519_SK key. Default is 0 (no restriction). -1 disables ED25519_SK keys.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "eks_access_key_id": {
                "type": "string",
                "description": "AWS IAM access key ID.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "eks_account_id": {
                "type": "string",
                "description": "Amazon account ID.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "eks_integration_enabled": {
                "type": "bool",
                "description": "Enable integration with Amazon EKS.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "eks_secret_access_key": {
                "type": "string",
                "description": "AWS IAM secret access key.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "elasticsearch_aws": {
                "type": "bool",
                "description": "Enable the use of AWS hosted Elasticsearch.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_aws_access_key": {
                "type": "string",
                "description": "AWS IAM access key.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "elasticsearch_aws_region": {
                "type": "string",
                "description": "The AWS region the Elasticsearch domain is configured.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_aws_secret_access_key": {
                "type": "string",
                "description": "AWS IAM secret access key.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "elasticsearch_indexed_field_length_limit": {
                "type": "number",
                "description": "Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_indexed_file_size_limit_kb": {
                "type": "number",
                "description": "Maximum size of repository and wiki files that are indexed by Elasticsearch.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_indexing": {
                "type": "bool",
                "description": "Enable Elasticsearch indexing.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_limit_indexing": {
                "type": "bool",
                "description": "Limit Elasticsearch to index certain namespaces and projects.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_max_bulk_concurrency": {
                "type": "number",
                "description": "Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_max_bulk_size_mb": {
                "type": "number",
                "description": "Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_namespace_ids": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "The namespaces to index via Elasticsearch if elasticsearch_limit_indexing is enabled.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_password": {
                "type": "string",
                "description": "The password of your Elasticsearch instance.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "elasticsearch_project_ids": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "The projects to index via Elasticsearch if elasticsearch_limit_indexing is enabled.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_search": {
                "type": "bool",
                "description": "Enable Elasticsearch search.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_url": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "elasticsearch_username": {
                "type": "string",
                "description": "The username of your Elasticsearch instance.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "email_additional_text": {
                "type": "string",
                "description": "Additional text added to the bottom of every email for legal/auditing/compliance reasons.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "email_author_in_body": {
                "type": "bool",
                "description": "Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "enabled_git_access_protocol": {
                "type": "string",
                "description": "Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "enforce_namespace_storage_limit": {
                "type": "bool",
                "description": "Enabling this permits enforcement of namespace storage limits.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "enforce_terms": {
                "type": "bool",
                "description": "(If enabled, requires: terms) Enforce application ToS to all users.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_auth_client_cert": {
                "type": "string",
                "description": "(If enabled, requires: external_auth_client_key) The certificate to use to authenticate with the external authorization service.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_auth_client_key": {
                "type": "string",
                "description": "Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "external_auth_client_key_pass": {
                "type": "string",
                "description": "Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "external_authorization_service_default_label": {
                "type": "string",
                "description": "The default classification label to use when requesting authorization and no classification label has been specified on the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_authorization_service_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: external_authorization_service_default_label, external_authorization_service_timeout and external_authorization_service_url) Enable using an external authorization service for accessing projects.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_authorization_service_timeout": {
                "type": "number",
                "description": "The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_authorization_service_url": {
                "type": "string",
                "description": "URL to which authorization requests are directed.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_pipeline_validation_service_timeout": {
                "type": "number",
                "description": "How long to wait for a response from the pipeline validation service. Assumes OK if it times out.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_pipeline_validation_service_token": {
                "type": "string",
                "description": "Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external_pipeline_validation_service_url.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_pipeline_validation_service_url": {
                "type": "string",
                "description": "URL to use for pipeline validation requests.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "file_template_project_id": {
                "type": "number",
                "description": "The ID of a project to load custom file templates from.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "first_day_of_week": {
                "type": "number",
                "description": "Start day of the week for calendar views and date pickers. Valid values are 0 (default) for Sunday, 1 for Monday, and 6 for Saturday.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "geo_node_allowed_ips": {
                "type": "string",
                "description": "Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "geo_status_timeout": {
                "type": "number",
                "description": "The amount of seconds after which a request to get a secondary node status times out.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "git_rate_limit_users_allowlist": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "List of usernames excluded from Git anti-abuse rate limits. Default: [], Maximum: 100 usernames. Introduced in GitLab 15.2.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "git_two_factor_session_expiry": {
                "type": "number",
                "description": "Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "gitaly_timeout_default": {
                "type": "number",
                "description": "Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "gitaly_timeout_fast": {
                "type": "number",
                "description": "Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "gitaly_timeout_medium": {
                "type": "number",
                "description": "Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "grafana_enabled": {
                "type": "bool",
                "description": "Enable Grafana.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "grafana_url": {
                "type": "string",
                "description": "Grafana URL.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "gravatar_enabled": {
                "type": "bool",
                "description": "Enable Gravatar.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "group_owners_can_manage_default_branch_protection": {
                "type": "bool",
                "description": "Prevent overrides of default branch protection.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "hashed_storage_enabled": {
                "type": "bool",
                "description": "Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "help_page_hide_commercial_content": {
                "type": "bool",
                "description": "Hide marketing-related entries from help.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "help_page_support_url": {
                "type": "string",
                "description": "Alternate support URL for help page and help dropdown.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "help_page_text": {
                "type": "string",
                "description": "Custom text displayed on the help page.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "help_text": {
                "type": "string",
                "description": "GitLab server administrator information.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "hide_third_party_offers": {
                "type": "bool",
                "description": "Do not display offers from third parties in GitLab.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "home_page_url": {
                "type": "string",
                "description": "Redirect to this URL when not logged in.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "housekeeping_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: housekeeping_bitmaps_enabled, housekeeping_full_repack_period, housekeeping_gc_period, and housekeeping_incremental_repack_period) Enable or disable Git housekeeping.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "housekeeping_full_repack_period": {
                "type": "number",
                "description": "Number of Git pushes after which an incremental git repack is run.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "housekeeping_gc_period": {
                "type": "number",
                "description": "Number of Git pushes after which git gc is run.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "housekeeping_incremental_repack_period": {
                "type": "number",
                "description": "Number of Git pushes after which an incremental git repack is run.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "html_emails_enabled": {
                "type": "bool",
                "description": "Enable HTML emails.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "import_sources": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Sources to allow project import from, possible values: github, bitbucket, bitbucket_server, gitlab, fogbugz, git, gitlab_project, gitea, manifest, and phabricator.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "in_product_marketing_emails_enabled": {
                "type": "bool",
                "description": "Enable in-product marketing emails. Enabled by default.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "inactive_projects_delete_after_months": {
                "type": "number",
                "description": "If delete_inactive_projects is true, the time (in months) to wait before deleting inactive projects. Default is 2. Introduced in GitLab 14.10. Became operational in GitLab 15.0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "inactive_projects_min_size_mb": {
                "type": "number",
                "description": "If delete_inactive_projects is true, the minimum repository size for projects to be checked for inactivity. Default is 0. Introduced in GitLab 14.10. Became operational in GitLab 15.0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "inactive_projects_send_warning_email_after_months": {
                "type": "number",
                "description": "If delete_inactive_projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive. Default is 1. Introduced in GitLab 14.10. Became operational in GitLab 15.0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "invisible_captcha_enabled": {
                "type": "bool",
                "description": "Enable Invisible CAPTCHA spam detection during sign-up. Disabled by default.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "issues_create_limit": {
                "type": "number",
                "description": "Max number of issue creation requests per minute per user. Disabled by default.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "keep_latest_artifact": {
                "type": "bool",
                "description": "Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time. Enabled by default.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "local_markdown_version": {
                "type": "number",
                "description": "Increase this value when any cached Markdown should be invalidated.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mailgun_events_enabled": {
                "type": "bool",
                "description": "Enable Mailgun event receiver.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mailgun_signing_key": {
                "type": "string",
                "description": "The Mailgun HTTP webhook signing key for receiving events from webhook.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "maintenance_mode": {
                "type": "bool",
                "description": "When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "maintenance_mode_message": {
                "type": "string",
                "description": "Message displayed when instance is in maintenance mode.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_artifacts_size": {
                "type": "number",
                "description": "Maximum artifacts size in MB.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_attachment_size": {
                "type": "number",
                "description": "Limit attachment size in MB.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_export_size": {
                "type": "number",
                "description": "Maximum export size in MB. 0 for unlimited. Default = 0 (unlimited).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_import_size": {
                "type": "number",
                "description": "Maximum import size in MB. 0 for unlimited. Default = 0 (unlimited) Modified from 50MB to 0 in GitLab 13.8.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_number_of_repository_downloads": {
                "type": "number",
                "description": "Maximum number of unique repositories a user can download in the specified time period before they are banned. Default: 0, Maximum: 10,000 repositories. Introduced in GitLab 15.1.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_number_of_repository_downloads_within_time_period": {
                "type": "number",
                "description": "Reporting time period (in seconds). Default: 0, Maximum: 864000 seconds (10 days). Introduced in GitLab 15.1.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_pages_size": {
                "type": "number",
                "description": "Maximum size of pages repositories in MB.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_personal_access_token_lifetime": {
                "type": "number",
                "description": "Maximum allowable lifetime for access tokens in days.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "max_ssh_key_lifetime": {
                "type": "number",
                "description": "Maximum allowable lifetime for SSH keys in days. Introduced in GitLab 14.6.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "metrics_method_call_threshold": {
                "type": "number",
                "description": "A method call is only tracked when it takes longer than the given amount of milliseconds.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mirror_available": {
                "type": "bool",
                "description": "Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mirror_capacity_threshold": {
                "type": "number",
                "description": "Minimum capacity to be available before scheduling more mirrors preemptively.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mirror_max_capacity": {
                "type": "number",
                "description": "Maximum number of mirrors that can be synchronizing at the same time.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mirror_max_delay": {
                "type": "number",
                "description": "Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "npm_package_requests_forwarding": {
                "type": "bool",
                "description": "Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "outbound_local_requests_whitelist": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "package_registry_cleanup_policies_worker_capacity": {
                "type": "number",
                "description": "Number of workers assigned to the packages cleanup policies.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "pages_domain_verification_enabled": {
                "type": "bool",
                "description": "Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "password_authentication_enabled_for_git": {
                "type": "bool",
                "description": "Enable authentication for Git over HTTP(S) via a GitLab account password. Default is true.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "password_authentication_enabled_for_web": {
                "type": "bool",
                "description": "Enable authentication for the web interface via a GitLab account password. Default is true.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "password_lowercase_required": {
                "type": "bool",
                "description": "Indicates whether passwords require at least one lowercase letter. Introduced in GitLab 15.1.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "password_number_required": {
                "type": "bool",
                "description": "Indicates whether passwords require at least one number. Introduced in GitLab 15.1.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "password_symbol_required": {
                "type": "bool",
                "description": "Indicates whether passwords require at least one symbol character. Introduced in GitLab 15.1.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "password_uppercase_required": {
                "type": "bool",
                "description": "Indicates whether passwords require at least one uppercase letter. Introduced in GitLab 15.1.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "performance_bar_allowed_group_path": {
                "type": "string",
                "description": "Path of the group that is allowed to toggle the performance bar.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "personal_access_token_prefix": {
                "type": "string",
                "description": "Prefix for all generated personal access tokens.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "pipeline_limit_per_project_user_sha": {
                "type": "number",
                "description": "Maximum number of pipeline creation requests per minute per user and commit. Disabled by default.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "plantuml_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: plantuml_url) Enable PlantUML integration. Default is false.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "plantuml_url": {
                "type": "string",
                "description": "The PlantUML instance URL for integration.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "polling_interval_multiplier": {
                "type": "number",
                "description": "Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "project_export_enabled": {
                "type": "bool",
                "description": "Enable project export.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "prometheus_metrics_enabled": {
                "type": "bool",
                "description": "Enable Prometheus metrics.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "protected_ci_variables": {
                "type": "bool",
                "description": "CI/CD variables are protected by default.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "push_event_activities_limit": {
                "type": "number",
                "description": "Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "push_event_hooks_limit": {
                "type": "number",
                "description": "Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "pypi_package_requests_forwarding": {
                "type": "bool",
                "description": "Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "rate_limiting_response_text": {
                "type": "string",
                "description": "When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "raw_blob_request_limit": {
                "type": "number",
                "description": "Max number of requests per minute for each raw path. Default: 300. To disable throttling set to 0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "recaptcha_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: recaptcha_private_key and recaptcha_site_key) Enable reCAPTCHA.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "recaptcha_private_key": {
                "type": "string",
                "description": "Private key for reCAPTCHA.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "recaptcha_site_key": {
                "type": "string",
                "description": "Site key for reCAPTCHA.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "receive_max_input_size": {
                "type": "number",
                "description": "Maximum push size (MB).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "repository_checks_enabled": {
                "type": "bool",
                "description": "GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "repository_size_limit": {
                "type": "number",
                "description": "Size limit per repository (MB).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "repository_storages": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "(GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "repository_storages_weighted": {
                "type": [
                  "map",
                  "number"
                ],
                "description": "(GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "require_admin_approval_after_user_signup": {
                "type": "bool",
                "description": "When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "require_two_factor_authentication": {
                "type": "bool",
                "description": "(If enabled, requires: two_factor_grace_period) Require all users to set up Two-factor authentication.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "restricted_visibility_levels": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Default is null which means there is no restriction.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "rsa_key_restriction": {
                "type": "number",
                "description": "The minimum allowed bit length of an uploaded RSA key. Default is 0 (no restriction). -1 disables RSA keys.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "search_rate_limit": {
                "type": "number",
                "description": "Max number of requests per minute for performing a search while authenticated. Default: 30. To disable throttling set to 0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "search_rate_limit_unauthenticated": {
                "type": "number",
                "description": "Max number of requests per minute for performing a search while unauthenticated. Default: 10. To disable throttling set to 0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "send_user_confirmation_email": {
                "type": "bool",
                "description": "Send confirmation email on sign-up.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "session_expire_delay": {
                "type": "number",
                "description": "Session duration in minutes. GitLab restart is required to apply changes.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "shared_runners_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: shared_runners_text and shared_runners_minutes) Enable shared runners for new projects.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "shared_runners_minutes": {
                "type": "number",
                "description": "Set the maximum number of CI/CD minutes that a group can use on shared runners per month.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "shared_runners_text": {
                "type": "string",
                "description": "Shared runners text.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "sidekiq_job_limiter_compression_threshold_bytes": {
                "type": "number",
                "description": "The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis. Default: 100 000 bytes (100KB).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "sidekiq_job_limiter_limit_bytes": {
                "type": "number",
                "description": "The threshold in bytes at which Sidekiq jobs are rejected. Default: 0 bytes (doesn’t reject any job).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "sidekiq_job_limiter_mode": {
                "type": "string",
                "description": "track or compress. Sets the behavior for Sidekiq job size limits. Default: ‘compress’.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "sign_in_text": {
                "type": "string",
                "description": "Text on the login page.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "signup_enabled": {
                "type": "bool",
                "description": "Enable registration. Default is true.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "slack_app_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: slack_app_id, slack_app_secret and slack_app_secret) Enable Slack app.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "slack_app_id": {
                "type": "string",
                "description": "The app ID of the Slack-app.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "slack_app_secret": {
                "type": "string",
                "description": "The app secret of the Slack-app.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "slack_app_signing_secret": {
                "type": "string",
                "description": "The signing secret of the Slack-app.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "slack_app_verification_token": {
                "type": "string",
                "description": "The verification token of the Slack-app.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "snippet_size_limit": {
                "type": "number",
                "description": "Max snippet content size in bytes. Default: 52428800 Bytes (50MB).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "snowplow_app_id": {
                "type": "string",
                "description": "The Snowplow site name / application ID. (for example, gitlab)",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "snowplow_collector_hostname": {
                "type": "string",
                "description": "The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "snowplow_cookie_domain": {
                "type": "string",
                "description": "The Snowplow cookie domain. (for example, .gitlab.com)",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "snowplow_enabled": {
                "type": "bool",
                "description": "Enable snowplow tracking.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "sourcegraph_enabled": {
                "type": "bool",
                "description": "Enables Sourcegraph integration. Default is false. If enabled, requires sourcegraph_url.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "sourcegraph_public_only": {
                "type": "bool",
                "description": "Blocks Sourcegraph from being loaded on private and internal projects. Default is true.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "sourcegraph_url": {
                "type": "string",
                "description": "The Sourcegraph instance URL for integration.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "spam_check_api_key": {
                "type": "string",
                "description": "API key used by GitLab for accessing the Spam Check service endpoint.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true,
                "sensitive": true
              },
              "spam_check_endpoint_enabled": {
                "type": "bool",
                "description": "Enables spam checking using external Spam Check API endpoint. Default is false.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "spam_check_endpoint_url": {
                "type": "string",
                "description": "URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "suggest_pipeline_enabled": {
                "type": "bool",
                "description": "Enable pipeline suggestion banner.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "terminal_max_session_time": {
                "type": "number",
                "description": "Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "terms": {
                "type": "string",
                "description": "(Required by: enforce_terms) Markdown content for the ToS.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_api_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: throttle_authenticated_api_period_in_seconds and throttle_authenticated_api_requests_per_period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_api_period_in_seconds": {
                "type": "number",
                "description": "Rate limit period (in seconds).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_api_requests_per_period": {
                "type": "number",
                "description": "Maximum requests per period per user.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_packages_api_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: throttle_authenticated_packages_api_period_in_seconds and throttle_authenticated_packages_api_requests_per_period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_packages_api_period_in_seconds": {
                "type": "number",
                "description": "Rate limit period (in seconds). View Package Registry rate limits for more details.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_packages_api_requests_per_period": {
                "type": "number",
                "description": "Maximum requests per period per user. View Package Registry rate limits for more details.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_web_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: throttle_authenticated_web_period_in_seconds and throttle_authenticated_web_requests_per_period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_web_period_in_seconds": {
                "type": "number",
                "description": "Rate limit period (in seconds).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_authenticated_web_requests_per_period": {
                "type": "number",
                "description": "Maximum requests per period per user.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_api_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: throttle_unauthenticated_api_period_in_seconds and throttle_unauthenticated_api_requests_per_period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_api_period_in_seconds": {
                "type": "number",
                "description": "Rate limit period in seconds.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_api_requests_per_period": {
                "type": "number",
                "description": "Max requests per period per IP.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_packages_api_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: throttle_unauthenticated_packages_api_period_in_seconds and throttle_unauthenticated_packages_api_requests_per_period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_packages_api_period_in_seconds": {
                "type": "number",
                "description": "Rate limit period (in seconds). View Package Registry rate limits for more details.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_packages_api_requests_per_period": {
                "type": "number",
                "description": "Maximum requests per period per user. View Package Registry rate limits for more details.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_web_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: throttle_unauthenticated_web_period_in_seconds and throttle_unauthenticated_web_requests_per_period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_web_period_in_seconds": {
                "type": "number",
                "description": "Rate limit period in seconds.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "throttle_unauthenticated_web_requests_per_period": {
                "type": "number",
                "description": "Max requests per period per IP.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "time_tracking_limit_to_hours": {
                "type": "bool",
                "description": "Limit display of time tracking units to hours. Default is false.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "two_factor_grace_period": {
                "type": "number",
                "description": "Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "unique_ips_limit_enabled": {
                "type": "bool",
                "description": "(If enabled, requires: unique_ips_limit_per_user and unique_ips_limit_time_window) Limit sign in from multiple IPs.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "unique_ips_limit_per_user": {
                "type": "number",
                "description": "Maximum number of IPs per user.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "unique_ips_limit_time_window": {
                "type": "number",
                "description": "How many seconds an IP is counted towards the limit.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "usage_ping_enabled": {
                "type": "bool",
                "description": "Every week GitLab reports license usage back to GitLab, Inc.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "user_deactivation_emails_enabled": {
                "type": "bool",
                "description": "Send an email to users upon account deactivation.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "user_default_external": {
                "type": "bool",
                "description": "Newly registered users are external by default.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "user_default_internal_regex": {
                "type": "string",
                "description": "Specify an email address regex pattern to identify default internal users.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "user_oauth_applications": {
                "type": "bool",
                "description": "Allow users to register any application to use GitLab as an OAuth provider.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "user_show_add_ssh_key_message": {
                "type": "bool",
                "description": "When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "version_check_enabled": {
                "type": "bool",
                "description": "Let GitLab inform you when an update is available.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "web_ide_clientside_preview_enabled": {
                "type": "bool",
                "description": "Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "whats_new_variant": {
                "type": "string",
                "description": "What’s new variant, possible values: all_tiers, current_tier, and disabled.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "wiki_page_max_content_bytes": {
                "type": "number",
                "description": "Maximum wiki page content size in bytes. Default: 52428800 Bytes (50 MB). The minimum value is 1024 bytes.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_application_settings` resource allows to manage the GitLab application settings.\n\n~> This is an **experimental resource**. By nature it doesn't properly fit into how Terraform resources are meant to work.\n   Feel free to join the [discussion](https://gitlab.com/gitlab-org/terraform-provider-gitlab/issues/957) if you have any\n   ideas or questions regarding this resource.\n\n~> All `gitlab_application_settings` use the same ID `gitlab`.\n\n!> This resource does not implement any destroy logic, it's a no-op at this point.\n   It's also not possible to revert to the previous settings.\n\n-> Requires at administrative privileges on GitLab.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/settings.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_branch": {
          "version": 0,
          "block": {
            "attributes": {
              "can_push": {
                "type": "bool",
                "description": "Bool, true if you can push to the branch.",
                "description_kind": "markdown",
                "computed": true
              },
              "commit": {
                "type": [
                  "set",
                  [
                    "object",
                    {
                      "author_email": "string",
                      "author_name": "string",
                      "authored_date": "string",
                      "committed_date": "string",
                      "committer_email": "string",
                      "committer_name": "string",
                      "id": "string",
                      "message": "string",
                      "parent_ids": [
                        "set",
                        "string"
                      ],
                      "short_id": "string",
                      "title": "string"
                    }
                  ]
                ],
                "description": "The commit associated with the branch ref.",
                "description_kind": "markdown",
                "computed": true
              },
              "default": {
                "type": "bool",
                "description": "Bool, true if branch is the default branch for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "developer_can_merge": {
                "type": "bool",
                "description": "Bool, true if developer level access allows to merge branch.",
                "description_kind": "markdown",
                "computed": true
              },
              "developer_can_push": {
                "type": "bool",
                "description": "Bool, true if developer level access allows git push.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "merged": {
                "type": "bool",
                "description": "Bool, true if the branch has been merged into it's parent.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name for this branch.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The ID or full path of the project which the branch is created against.",
                "description_kind": "markdown",
                "required": true
              },
              "protected": {
                "type": "bool",
                "description": "Bool, true if branch has branch protection.",
                "description_kind": "markdown",
                "computed": true
              },
              "ref": {
                "type": "string",
                "description": "The ref which the branch is created from.",
                "description_kind": "markdown",
                "required": true
              },
              "web_url": {
                "type": "string",
                "description": "The url of the created branch (https).",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_branch` resource allows to manage the lifecycle of a repository branch.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_branch_protection": {
          "version": 0,
          "block": {
            "attributes": {
              "allow_force_push": {
                "type": "bool",
                "description": "Can be set to true to allow users with push access to force push.",
                "description_kind": "markdown",
                "optional": true
              },
              "branch": {
                "type": "string",
                "description": "Name of the branch.",
                "description_kind": "markdown",
                "required": true
              },
              "branch_protection_id": {
                "type": "number",
                "description": "The ID of the branch protection (not the branch name).",
                "description_kind": "markdown",
                "computed": true
              },
              "code_owner_approval_required": {
                "type": "bool",
                "description": "Can be set to true to require code owner approval before merging. Only available own Premium and Ultimate instances.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "merge_access_level": {
                "type": "string",
                "description": "Access levels allowed to merge. Valid values are: `no one`, `developer`, `maintainer`.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "push_access_level": {
                "type": "string",
                "description": "Access levels allowed to push. Valid values are: `no one`, `developer`, `maintainer`.",
                "description_kind": "markdown",
                "optional": true
              },
              "unprotect_access_level": {
                "type": "string",
                "description": "Access levels allowed to unprotect. Valid values are: `no one`, `developer`, `maintainer`.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "block_types": {
              "allowed_to_merge": {
                "nesting_mode": "set",
                "block": {
                  "attributes": {
                    "access_level": {
                      "type": "string",
                      "description": "Level of access.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "access_level_description": {
                      "type": "string",
                      "description": "Readable description of level of access.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "group_id": {
                      "type": "number",
                      "description": "The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `user_id`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "user_id": {
                      "type": "number",
                      "description": "The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `group_id`.",
                      "description_kind": "markdown",
                      "optional": true
                    }
                  },
                  "description": "Defines permissions for action.",
                  "description_kind": "markdown"
                }
              },
              "allowed_to_push": {
                "nesting_mode": "set",
                "block": {
                  "attributes": {
                    "access_level": {
                      "type": "string",
                      "description": "Level of access.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "access_level_description": {
                      "type": "string",
                      "description": "Readable description of level of access.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "group_id": {
                      "type": "number",
                      "description": "The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `user_id`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "user_id": {
                      "type": "number",
                      "description": "The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `group_id`.",
                      "description_kind": "markdown",
                      "optional": true
                    }
                  },
                  "description": "Defines permissions for action.",
                  "description_kind": "markdown"
                }
              },
              "allowed_to_unprotect": {
                "nesting_mode": "set",
                "block": {
                  "attributes": {
                    "access_level": {
                      "type": "string",
                      "description": "Level of access.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "access_level_description": {
                      "type": "string",
                      "description": "Readable description of level of access.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "group_id": {
                      "type": "number",
                      "description": "The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with `user_id`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "user_id": {
                      "type": "number",
                      "description": "The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with `group_id`.",
                      "description_kind": "markdown",
                      "optional": true
                    }
                  },
                  "description": "Defines permissions for action.",
                  "description_kind": "markdown"
                }
              }
            },
            "description": "The `gitlab_branch_protection` resource allows to manage the lifecycle of a protected branch of a repository.\n\n~> **Branch Protection Behavior for the default branch**\n   Depending on the GitLab instance, group or project setting the default branch of a project is created automatically by GitLab behind the scenes.\n   Due to [some](https://gitlab.com/gitlab-org/terraform-provider-gitlab/issues/792) [limitations](https://discuss.hashicorp.com/t/ignore-the-order-of-a-complex-typed-list/42242) in the Terraform Provider SDK and the GitLab API,\n   when creating a new project and trying to manage the branch protection setting for its default branch the `gitlab_branch_protection` resource will\n   automatically take ownership of the default branch without an explicit import by unprotecting and properly protecting it again.\n   Having multiple `gitlab_branch_protection` resources for the same project and default branch will result in them overriding each other - make sure to only have a single one.\n   This behavior might change in the future.\n\n~> The `allowed_to_push`, `allowed_to_merge`, `allowed_to_unprotect`, `unprotect_access_level` and `code_owner_approval_required` attributes require a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_cluster_agent": {
          "version": 0,
          "block": {
            "attributes": {
              "agent_id": {
                "type": "number",
                "description": "The ID of the agent.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "The ISO8601 datetime when the agent was created.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_by_user_id": {
                "type": "number",
                "description": "The ID of the user who created the agent.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The Name of the agent.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "ID or full path of the project maintained by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_cluster_agent` resource allows to manage the lifecycle of a GitLab Agent for Kubernetes.\n\n-> Note that this resource only registers the agent, but doesn't configure it.\n   The configuration needs to be manually added as described in\n   [the docs](https://docs.gitlab.com/ee/user/clusters/agent/install/index.html#create-an-agent-configuration-file).\n   However, a `gitlab_repository_file` resource may be used to achieve that.\n\n-> Requires at least maintainer permissions on the project.\n\n-> Requires at least GitLab 14.10\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_cluster_agent_token": {
          "version": 0,
          "block": {
            "attributes": {
              "agent_id": {
                "type": "number",
                "description": "The ID of the agent.",
                "description_kind": "markdown",
                "required": true
              },
              "created_at": {
                "type": "string",
                "description": "The ISO8601 datetime when the agent was created.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_by_user_id": {
                "type": "number",
                "description": "The ID of the user who created the agent.",
                "description_kind": "markdown",
                "computed": true
              },
              "description": {
                "type": "string",
                "description": "The Description for the agent.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "last_used_at": {
                "type": "string",
                "description": "The ISO8601 datetime when the token was last used.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The Name of the agent.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "ID or full path of the project maintained by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "status": {
                "type": "string",
                "description": "The status of the token. Valid values are `active`, `revoked`.",
                "description_kind": "markdown",
                "computed": true
              },
              "token": {
                "type": "string",
                "description": "The secret token for the agent. The `token` is not available in imported resources.",
                "description_kind": "markdown",
                "computed": true
              },
              "token_id": {
                "type": "number",
                "description": "The ID of the token.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_cluster_agent_token` resource allows to manage the lifecycle of a token for a GitLab Agent for Kubernetes.\n\n-> Requires at least maintainer permissions on the project.\n\n-> Requires at least GitLab 15.0\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html#create-an-agent-token)",
            "description_kind": "markdown"
          }
        },
        "gitlab_deploy_key": {
          "version": 0,
          "block": {
            "attributes": {
              "can_push": {
                "type": "bool",
                "description": "Allow this deploy key to be used to push changes to the project. Defaults to `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The public ssh key body.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the deploy key to.",
                "description_kind": "markdown",
                "required": true
              },
              "title": {
                "type": "string",
                "description": "A title to describe the deploy key with.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_deploy_key` resource allows to manage the lifecycle of a deploy key.\n\n-> To enable an already existing deploy key for another project use the `gitlab_project_deploy_key` resource.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_deploy_key_enable": {
          "version": 0,
          "block": {
            "attributes": {
              "can_push": {
                "type": "bool",
                "description": "Can deploy key push to the project's repository.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "Deploy key.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "key_id": {
                "type": "string",
                "description": "The Gitlab key id for the pre-existing deploy key",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the deploy key to.",
                "description_kind": "markdown",
                "required": true
              },
              "title": {
                "type": "string",
                "description": "Deploy key's title.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_deploy_key_enable` resource allows to enable an already existing deploy key (see `gitlab_deploy_key resource`) for a specific project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#enable-a-deploy-key)",
            "description_kind": "markdown"
          }
        },
        "gitlab_deploy_token": {
          "version": 0,
          "block": {
            "attributes": {
              "expires_at": {
                "type": "string",
                "description": "Time the token will expire it, RFC3339 format. Will not expire per default.",
                "description_kind": "markdown",
                "optional": true
              },
              "group": {
                "type": "string",
                "description": "The name or id of the group to add the deploy token to.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "A name to describe the deploy token with.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the deploy token to.",
                "description_kind": "markdown",
                "optional": true
              },
              "scopes": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "Valid values: `read_repository`, `read_registry`, `read_package_registry`, `write_registry`, `write_package_registry`.",
                "description_kind": "markdown",
                "required": true
              },
              "token": {
                "type": "string",
                "description": "The secret token. This is only populated when creating a new deploy token. **Note**: The token is not available for imported resources.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "username": {
                "type": "string",
                "description": "A username for the deploy token. Default is `gitlab+deploy-token-{n}`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_deploy_token` resource allows to manage the lifecycle of group and project deploy tokens.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_tokens.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group": {
          "version": 0,
          "block": {
            "attributes": {
              "auto_devops_enabled": {
                "type": "bool",
                "description": "Defaults to false. Default to Auto DevOps pipeline for all projects within this group.",
                "description_kind": "markdown",
                "optional": true
              },
              "avatar": {
                "type": "string",
                "description": "A local path to the avatar image to upload. **Note**: not available for imported resources.",
                "description_kind": "markdown",
                "optional": true
              },
              "avatar_hash": {
                "type": "string",
                "description": "The hash of the avatar image. Use `filesha256(\"path/to/avatar.png\")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the avatar image.",
                "description_kind": "markdown",
                "computed": true
              },
              "default_branch_protection": {
                "type": "number",
                "description": "Defaults to 2. See https://docs.gitlab.com/ee/api/groups.html#options-for-default_branch_protection",
                "description_kind": "markdown",
                "optional": true
              },
              "description": {
                "type": "string",
                "description": "The description of the group.",
                "description_kind": "markdown",
                "optional": true
              },
              "emails_disabled": {
                "type": "bool",
                "description": "Defaults to false. Disable email notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "extra_shared_runners_minutes_limit": {
                "type": "number",
                "description": "Can be set by administrators only. Additional CI/CD minutes for this group.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "full_name": {
                "type": "string",
                "description": "The full name of the group.",
                "description_kind": "markdown",
                "computed": true
              },
              "full_path": {
                "type": "string",
                "description": "The full path of the group.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "ip_restriction_ranges": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "A list of IP addresses or subnet masks to restrict group access. Will be concatenated together into a comma separated string. Only allowed on top level groups.",
                "description_kind": "markdown",
                "optional": true
              },
              "lfs_enabled": {
                "type": "bool",
                "description": "Defaults to true. Enable/disable Large File Storage (LFS) for the projects in this group.",
                "description_kind": "markdown",
                "optional": true
              },
              "membership_lock": {
                "type": "bool",
                "description": "Users cannot be added to projects in this group.",
                "description_kind": "markdown",
                "optional": true
              },
              "mentions_disabled": {
                "type": "bool",
                "description": "Defaults to false. Disable the capability of a group from getting mentioned.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of this group.",
                "description_kind": "markdown",
                "required": true
              },
              "parent_id": {
                "type": "number",
                "description": "Id of the parent group (creates a nested group).",
                "description_kind": "markdown",
                "optional": true
              },
              "path": {
                "type": "string",
                "description": "The path of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "prevent_forking_outside_group": {
                "type": "bool",
                "description": "Defaults to false. When enabled, users can not fork projects from this group to external namespaces.",
                "description_kind": "markdown",
                "optional": true
              },
              "project_creation_level": {
                "type": "string",
                "description": "Defaults to maintainer. Determine if developers can create projects in the group.",
                "description_kind": "markdown",
                "optional": true
              },
              "request_access_enabled": {
                "type": "bool",
                "description": "Defaults to false. Allow users to request member access.",
                "description_kind": "markdown",
                "optional": true
              },
              "require_two_factor_authentication": {
                "type": "bool",
                "description": "Defaults to false. Require all users in this group to setup Two-factor authentication.",
                "description_kind": "markdown",
                "optional": true
              },
              "runners_token": {
                "type": "string",
                "description": "The group level registration token to use during runner setup.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "share_with_group_lock": {
                "type": "bool",
                "description": "Defaults to false. Prevent sharing a project with another group within this group.",
                "description_kind": "markdown",
                "optional": true
              },
              "shared_runners_minutes_limit": {
                "type": "number",
                "description": "Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "subgroup_creation_level": {
                "type": "string",
                "description": "Defaults to owner. Allowed to create subgroups.",
                "description_kind": "markdown",
                "optional": true
              },
              "two_factor_grace_period": {
                "type": "number",
                "description": "Defaults to 48. Time before Two-factor authentication is enforced (in hours).",
                "description_kind": "markdown",
                "optional": true
              },
              "visibility_level": {
                "type": "string",
                "description": "The group's visibility. Can be `private`, `internal`, or `public`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "Web URL of the group.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group` resource allows to manage the lifecycle of a group.\n\n-> On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use this provider nor the API to do this.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_access_token": {
          "version": 0,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "The access level for the group access token. Valid values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.",
                "description_kind": "markdown",
                "optional": true
              },
              "active": {
                "type": "bool",
                "description": "True if the token is active.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Time the token has been created, RFC3339 format.",
                "description_kind": "markdown",
                "computed": true
              },
              "expires_at": {
                "type": "string",
                "description": "The token expires at midnight UTC on that date. The date must be in the format YYYY-MM-DD. Default is never.",
                "description_kind": "markdown",
                "optional": true
              },
              "group": {
                "type": "string",
                "description": "The ID or path of the group to add the group access token to.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the group access token.",
                "description_kind": "markdown",
                "required": true
              },
              "revoked": {
                "type": "bool",
                "description": "True if the token is revoked.",
                "description_kind": "markdown",
                "computed": true
              },
              "scopes": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "The scope for the group access token. It determines the actions which can be performed when authenticating with this token. Valid values are: `api`, `read_api`, `read_registry`, `write_registry`, `read_repository`, `write_repository`.",
                "description_kind": "markdown",
                "required": true
              },
              "token": {
                "type": "string",
                "description": "The group access token. This is only populated when creating a new group access token. This attribute is not available for imported resources.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "user_id": {
                "type": "number",
                "description": "The user id associated to the token.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group_access`token resource allows to manage the lifecycle of a group access token.\n\n-> Group Access Token were introduced in GitLab 14.7\n\n**Upstream API**: [GitLab REST API](https://docs.gitlab.com/ee/api/group_access_tokens.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_badge": {
          "version": 0,
          "block": {
            "attributes": {
              "group": {
                "type": "string",
                "description": "The id of the group to add the badge to.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "image_url": {
                "type": "string",
                "description": "The image url which will be presented on group overview.",
                "description_kind": "markdown",
                "required": true
              },
              "link_url": {
                "type": "string",
                "description": "The url linked with the badge.",
                "description_kind": "markdown",
                "required": true
              },
              "rendered_image_url": {
                "type": "string",
                "description": "The image_url argument rendered (in case of use of placeholders).",
                "description_kind": "markdown",
                "computed": true
              },
              "rendered_link_url": {
                "type": "string",
                "description": "The link_url argument rendered (in case of use of placeholders).",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group_badge` resource allows to mange the lifecycle of group badges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/user/project/badges.html#group-badges)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_cluster": {
          "version": 0,
          "block": {
            "attributes": {
              "cluster_type": {
                "type": "string",
                "description": "Cluster type.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Create time.",
                "description_kind": "markdown",
                "computed": true
              },
              "domain": {
                "type": "string",
                "description": "The base domain of the cluster.",
                "description_kind": "markdown",
                "optional": true
              },
              "enabled": {
                "type": "bool",
                "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.",
                "description_kind": "markdown",
                "optional": true
              },
              "environment_scope": {
                "type": "string",
                "description": "The associated environment to the cluster. Defaults to `*`.",
                "description_kind": "markdown",
                "optional": true
              },
              "group": {
                "type": "string",
                "description": "The id of the group to add the cluster to.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "kubernetes_api_url": {
                "type": "string",
                "description": "The URL to access the Kubernetes API.",
                "description_kind": "markdown",
                "required": true
              },
              "kubernetes_authorization_type": {
                "type": "string",
                "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.",
                "description_kind": "markdown",
                "optional": true
              },
              "kubernetes_ca_cert": {
                "type": "string",
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate).",
                "description_kind": "markdown",
                "optional": true
              },
              "kubernetes_token": {
                "type": "string",
                "description": "The token to authenticate against Kubernetes.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "managed": {
                "type": "bool",
                "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.",
                "description_kind": "markdown",
                "optional": true
              },
              "management_project_id": {
                "type": "string",
                "description": "The ID of the management project for the cluster.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of cluster.",
                "description_kind": "markdown",
                "required": true
              },
              "platform_type": {
                "type": "string",
                "description": "Platform type.",
                "description_kind": "markdown",
                "computed": true
              },
              "provider_type": {
                "type": "string",
                "description": "Provider type.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group_cluster` resource allows to manage the lifecycle of a group cluster.\n\n~> This is deprecated GitLab feature since 14.5\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_clusters.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_custom_attribute": {
          "version": 0,
          "block": {
            "attributes": {
              "group": {
                "type": "number",
                "description": "The id of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "Key for the Custom Attribute.",
                "description_kind": "markdown",
                "required": true
              },
              "value": {
                "type": "string",
                "description": "Value for the Custom Attribute.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_group_custom_attribute` resource allows to manage custom attributes for a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/custom_attributes.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_hook": {
          "version": 0,
          "block": {
            "attributes": {
              "confidential_issues_events": {
                "type": "bool",
                "description": "Invoke the hook for confidential issues events.",
                "description_kind": "markdown",
                "optional": true
              },
              "confidential_note_events": {
                "type": "bool",
                "description": "Invoke the hook for confidential notes events.",
                "description_kind": "markdown",
                "optional": true
              },
              "deployment_events": {
                "type": "bool",
                "description": "Invoke the hook for deployment events.",
                "description_kind": "markdown",
                "optional": true
              },
              "enable_ssl_verification": {
                "type": "bool",
                "description": "Enable ssl verification when invoking the hook.",
                "description_kind": "markdown",
                "optional": true
              },
              "group": {
                "type": "string",
                "description": "The ID or full path of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "group_id": {
                "type": "number",
                "description": "The id of the group for the hook.",
                "description_kind": "markdown",
                "computed": true
              },
              "hook_id": {
                "type": "number",
                "description": "The id of the group hook.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "issues_events": {
                "type": "bool",
                "description": "Invoke the hook for issues events.",
                "description_kind": "markdown",
                "optional": true
              },
              "job_events": {
                "type": "bool",
                "description": "Invoke the hook for job events.",
                "description_kind": "markdown",
                "optional": true
              },
              "merge_requests_events": {
                "type": "bool",
                "description": "Invoke the hook for merge requests.",
                "description_kind": "markdown",
                "optional": true
              },
              "note_events": {
                "type": "bool",
                "description": "Invoke the hook for notes events.",
                "description_kind": "markdown",
                "optional": true
              },
              "pipeline_events": {
                "type": "bool",
                "description": "Invoke the hook for pipeline events.",
                "description_kind": "markdown",
                "optional": true
              },
              "push_events": {
                "type": "bool",
                "description": "Invoke the hook for push events.",
                "description_kind": "markdown",
                "optional": true
              },
              "push_events_branch_filter": {
                "type": "string",
                "description": "Invoke the hook for push events on matching branches only.",
                "description_kind": "markdown",
                "optional": true
              },
              "releases_events": {
                "type": "bool",
                "description": "Invoke the hook for releases events.",
                "description_kind": "markdown",
                "optional": true
              },
              "subgroup_events": {
                "type": "bool",
                "description": "Invoke the hook for subgroup events.",
                "description_kind": "markdown",
                "optional": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "Invoke the hook for tag push events.",
                "description_kind": "markdown",
                "optional": true
              },
              "token": {
                "type": "string",
                "description": "A token to present when invoking the hook. The token is not available for imported resources.",
                "description_kind": "markdown",
                "optional": true,
                "sensitive": true
              },
              "url": {
                "type": "string",
                "description": "The url of the hook to invoke.",
                "description_kind": "markdown",
                "required": true
              },
              "wiki_page_events": {
                "type": "bool",
                "description": "Invoke the hook for wiki page events.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_group_hook` resource allows to manage the lifecycle of a group hook.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#hooks)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_label": {
          "version": 0,
          "block": {
            "attributes": {
              "color": {
                "type": "string",
                "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).",
                "description_kind": "markdown",
                "required": true
              },
              "description": {
                "type": "string",
                "description": "The description of the label.",
                "description_kind": "markdown",
                "optional": true
              },
              "group": {
                "type": "string",
                "description": "The name or id of the group to add the label to.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the label.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_group_label` resource allows to manage the lifecycle of labels within a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/user/project/labels.html#group-labels)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_ldap_link": {
          "version": 0,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`",
                "description_kind": "markdown",
                "deprecated": true,
                "optional": true
              },
              "cn": {
                "type": "string",
                "description": "The CN of the LDAP group to link with.",
                "description_kind": "markdown",
                "required": true
              },
              "force": {
                "type": "bool",
                "description": "If true, then delete and replace an existing LDAP link if one exists.",
                "description_kind": "markdown",
                "optional": true
              },
              "group_access": {
                "type": "string",
                "description": "Minimum access level for members of the LDAP group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`",
                "description_kind": "markdown",
                "optional": true
              },
              "group_id": {
                "type": "string",
                "description": "The id of the GitLab group.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "ldap_provider": {
                "type": "string",
                "description": "The name of the LDAP provider as stored in the GitLab database. Note that this is NOT the value of the `label` attribute as shown in the web UI. In most cases this will be `ldapmain` but you may use the [LDAP check rake task](https://docs.gitlab.com/ee/administration/raketasks/ldap.html#check) for receiving the LDAP server name: `LDAP: ... Server: ldapmain`",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_group_ldap_link` resource allows to manage the lifecycle of an LDAP integration with a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#ldap-group-links)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_membership": {
          "version": 0,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`.",
                "description_kind": "markdown",
                "required": true
              },
              "expires_at": {
                "type": "string",
                "description": "Expiration date for the group membership. Format: `YYYY-MM-DD`",
                "description_kind": "markdown",
                "optional": true
              },
              "group_id": {
                "type": "string",
                "description": "The id of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "skip_subresources_on_destroy": {
                "type": "bool",
                "description": "Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Only used during a destroy.",
                "description_kind": "markdown",
                "optional": true
              },
              "unassign_issuables_on_destroy": {
                "type": "bool",
                "description": "Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Only used during a destroy.",
                "description_kind": "markdown",
                "optional": true
              },
              "user_id": {
                "type": "number",
                "description": "The id of the user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_group_membership` resource allows to manage the lifecycle of a users group membersip.\n\n-> If a group should grant membership to another group use the `gitlab_group_share_group` resource instead.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_project_file_template": {
          "version": 0,
          "block": {
            "attributes": {
              "file_template_project_id": {
                "type": "number",
                "description": "The ID of the project that will be used for file templates. This project must be the direct\n\t\t\t\tchild of the project defined by the group_id",
                "description_kind": "markdown",
                "required": true
              },
              "group_id": {
                "type": "number",
                "description": "The ID of the group that will use the file template project. This group must be the direct\n                parent of the project defined by project_id",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_group_project_file_template` resource allows setting a project from which\ncustom file templates will be loaded. In order to use this resource, the project selected must be a direct child of\nthe group selected. After the resource has run, `gitlab_project_template.template_project_id` is available for use.\nFor more information about which file types are available as templates, view \n[GitLab's documentation](https://docs.gitlab.com/ee/user/group/custom_project_templates.html)\n\n-> This resource requires a GitLab Enterprise instance with a Premium license.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#update-group)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_saml_link": {
          "version": 0,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "Access level for members of the SAML group. Valid values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.",
                "description_kind": "markdown",
                "required": true
              },
              "group": {
                "type": "string",
                "description": "The ID or path of the group to add the SAML Group Link to.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "saml_group_name": {
                "type": "string",
                "description": "The name of the SAML group.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_group_saml_link` resource allows to manage the lifecycle of an SAML integration with a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#saml-group-links)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_share_group": {
          "version": 0,
          "block": {
            "attributes": {
              "expires_at": {
                "type": "string",
                "description": "Share expiration date. Format: `YYYY-MM-DD`",
                "description_kind": "markdown",
                "optional": true
              },
              "group_access": {
                "type": "string",
                "description": "The access level to grant the group. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`",
                "description_kind": "markdown",
                "required": true
              },
              "group_id": {
                "type": "string",
                "description": "The id of the main group to be shared.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "share_group_id": {
                "type": "number",
                "description": "The id of the additional group with which the main group will be shared.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_group_share_group` resource allows to manage the lifecycle of group shared with another group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#share-groups-with-groups)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_variable": {
          "version": 0,
          "block": {
            "attributes": {
              "environment_scope": {
                "type": "string",
                "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.",
                "description_kind": "markdown",
                "optional": true
              },
              "group": {
                "type": "string",
                "description": "The name or id of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The name of the variable.",
                "description_kind": "markdown",
                "required": true
              },
              "masked": {
                "type": "bool",
                "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "protected": {
                "type": "bool",
                "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "value": {
                "type": "string",
                "description": "The value of the variable.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "variable_type": {
                "type": "string",
                "description": "The type of a variable. Valid values are: `env_var`, `file`. Default is `env_var`.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_group_variable` resource allows to manage the lifecycle of a CI/CD variable for a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_instance_cluster": {
          "version": 0,
          "block": {
            "attributes": {
              "cluster_type": {
                "type": "string",
                "description": "Cluster type.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Create time.",
                "description_kind": "markdown",
                "computed": true
              },
              "domain": {
                "type": "string",
                "description": "The base domain of the cluster.",
                "description_kind": "markdown",
                "optional": true
              },
              "enabled": {
                "type": "bool",
                "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.",
                "description_kind": "markdown",
                "optional": true
              },
              "environment_scope": {
                "type": "string",
                "description": "The associated environment to the cluster. Defaults to `*`.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "kubernetes_api_url": {
                "type": "string",
                "description": "The URL to access the Kubernetes API.",
                "description_kind": "markdown",
                "required": true
              },
              "kubernetes_authorization_type": {
                "type": "string",
                "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.",
                "description_kind": "markdown",
                "optional": true
              },
              "kubernetes_ca_cert": {
                "type": "string",
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate).",
                "description_kind": "markdown",
                "optional": true
              },
              "kubernetes_namespace": {
                "type": "string",
                "description": "The unique namespace related to the instance.",
                "description_kind": "markdown",
                "optional": true
              },
              "kubernetes_token": {
                "type": "string",
                "description": "The token to authenticate against Kubernetes. This attribute cannot be read.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "managed": {
                "type": "bool",
                "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.",
                "description_kind": "markdown",
                "optional": true
              },
              "management_project_id": {
                "type": "string",
                "description": "The ID of the management project for the cluster.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of cluster.",
                "description_kind": "markdown",
                "required": true
              },
              "platform_type": {
                "type": "string",
                "description": "Platform type.",
                "description_kind": "markdown",
                "computed": true
              },
              "provider_type": {
                "type": "string",
                "description": "Provider type.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_instance_cluster` resource allows to manage the lifecycle of an instance cluster.\n\n~> This is deprecated GitLab feature since 14.5\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_clusters.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_instance_variable": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The name of the variable.",
                "description_kind": "markdown",
                "required": true
              },
              "masked": {
                "type": "bool",
                "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "protected": {
                "type": "bool",
                "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "value": {
                "type": "string",
                "description": "The value of the variable.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "variable_type": {
                "type": "string",
                "description": "The type of a variable. Valid values are: `env_var`, `file`. Default is `env_var`.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_instance_variable` resource allows to manage the lifecycle of an instance-level CI/CD variable.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_label": {
          "version": 0,
          "block": {
            "attributes": {
              "color": {
                "type": "string",
                "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) or one of the [CSS color names](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords).",
                "description_kind": "markdown",
                "required": true
              },
              "description": {
                "type": "string",
                "description": "The description of the label.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the label.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the label to.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_label` resource allows to manage the lifecycle of a project label.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/labels.html#project-labels)",
            "description_kind": "markdown"
          }
        },
        "gitlab_managed_license": {
          "version": 0,
          "block": {
            "attributes": {
              "approval_status": {
                "type": "string",
                "description": "The approval status of the license. Valid values are: `approved`, `blacklisted`, `allowed`, `denied`. \"approved\" and \"blacklisted\"\n\t\t\t\thave been deprecated in favor of \"allowed\" and \"denied\"; use \"allowed\" and \"denied\" for GitLab versions 15.0 and higher.\n\t\t\t\tPrior to version 15.0 and after 14.6, the values are equivalent.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the managed license (I.e., 'Apache License 2.0' or 'MIT license')",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The ID of the project under which the managed license will be created.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_managed_license` resource allows to manage the lifecycle of a managed license.\n\n-> This resource requires a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/managed_licenses.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_pages_domain": {
          "version": 0,
          "block": {
            "attributes": {
              "auto_ssl_enabled": {
                "type": "bool",
                "description": "Enables [automatic generation](https://docs.gitlab.com/ee/user/project/pages/custom_domains_ssl_tls_certification/lets_encrypt_integration.html) of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to \"true\", certificate can't be provided.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "certificate": {
                "type": "string",
                "description": "The certificate in PEM format with intermediates following in most specific to least specific order.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "domain": {
                "type": "string",
                "description": "The custom domain indicated by the user.",
                "description_kind": "markdown",
                "required": true
              },
              "expired": {
                "type": "bool",
                "description": "Whether the certificate is expired.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "id": {
                "type": "string",
                "description": "The ID of this Terraform resource. In the format of `<project>:<domain>`.",
                "description_kind": "markdown",
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The certificate key in PEM format.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding) owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "url": {
                "type": "string",
                "description": "The URL for the given domain.",
                "description_kind": "markdown",
                "computed": true
              },
              "verification_code": {
                "type": "string",
                "description": "The verification code for the domain.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "verified": {
                "type": "bool",
                "description": "The certificate data.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_pages_domain` resource allows connecting custom domains and TLS certificates in GitLab Pages.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pages_domains.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_personal_access_token": {
          "version": 0,
          "block": {
            "attributes": {
              "active": {
                "type": "bool",
                "description": "True if the token is active.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Time the token has been created, RFC3339 format.",
                "description_kind": "markdown",
                "computed": true
              },
              "expires_at": {
                "type": "string",
                "description": "The token expires at midnight UTC on that date. The date must be in the format YYYY-MM-DD. Default is never.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the personal access token.",
                "description_kind": "markdown",
                "required": true
              },
              "revoked": {
                "type": "bool",
                "description": "True if the token is revoked.",
                "description_kind": "markdown",
                "computed": true
              },
              "scopes": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "The scope for the personal access token. It determines the actions which can be performed when authenticating with this token. Valid values are: `api`, `read_user`, `read_api`, `read_repository`, `write_repository`, `read_registry`, `write_registry`, `sudo`.",
                "description_kind": "markdown",
                "required": true
              },
              "token": {
                "type": "string",
                "description": "The personal access token. This is only populated when creating a new personal access token. This attribute is not available for imported resources.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "user_id": {
                "type": "number",
                "description": "The id of the user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_personal_access_token` resource allows to manage the lifecycle of a personal access token for a specified user.\n\n-> This resource requires administration privileges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/personal_access_tokens.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_pipeline_schedule": {
          "version": 0,
          "block": {
            "attributes": {
              "active": {
                "type": "bool",
                "description": "The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.",
                "description_kind": "markdown",
                "optional": true
              },
              "cron": {
                "type": "string",
                "description": "The cron (e.g. `0 1 * * *`).",
                "description_kind": "markdown",
                "required": true
              },
              "cron_timezone": {
                "type": "string",
                "description": "The timezone.",
                "description_kind": "markdown",
                "optional": true
              },
              "description": {
                "type": "string",
                "description": "The description of the pipeline schedule.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the schedule to.",
                "description_kind": "markdown",
                "required": true
              },
              "ref": {
                "type": "string",
                "description": "The branch/tag name to be triggered.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_pipeline_schedule` resource allows to manage the lifecycle of a scheduled pipeline.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_schedules.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_pipeline_schedule_variable": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "Name of the variable.",
                "description_kind": "markdown",
                "required": true
              },
              "pipeline_schedule_id": {
                "type": "number",
                "description": "The id of the pipeline schedule.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The id of the project to add the schedule to.",
                "description_kind": "markdown",
                "required": true
              },
              "value": {
                "type": "string",
                "description": "Value of the variable.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_pipeline_schedule_variable` resource allows to manage the lifecycle of a variable for a pipeline schedule.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_schedules.html#pipeline-schedule-variables)",
            "description_kind": "markdown"
          }
        },
        "gitlab_pipeline_trigger": {
          "version": 0,
          "block": {
            "attributes": {
              "description": {
                "type": "string",
                "description": "The description of the pipeline trigger.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the trigger to.",
                "description_kind": "markdown",
                "required": true
              },
              "token": {
                "type": "string",
                "description": "The pipeline trigger token.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              }
            },
            "description": "The `gitlab_pipeline_trigger` resource allows to manage the lifecycle of a pipeline trigger.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/pipeline_triggers.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project": {
          "version": 0,
          "block": {
            "attributes": {
              "allow_merge_on_skipped_pipeline": {
                "type": "bool",
                "description": "Set to true if you want to treat skipped pipelines as if they finished with success.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "analytics_access_level": {
                "type": "string",
                "description": "Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "approvals_before_merge": {
                "type": "number",
                "description": "Number of merge request approvals required for merging. Default is 0.\n  This field **does not** work well in combination with the `gitlab_project_approval_rule` resource\n  and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).\n  In the meantime we recommend against using this attribute and use `gitlab_project_approval_rule` instead.\n",
                "description_kind": "markdown",
                "optional": true
              },
              "archive_on_destroy": {
                "type": "bool",
                "description": "Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.",
                "description_kind": "markdown",
                "optional": true
              },
              "archived": {
                "type": "bool",
                "description": "Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.",
                "description_kind": "markdown",
                "optional": true
              },
              "auto_cancel_pending_pipelines": {
                "type": "string",
                "description": "Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "auto_devops_deploy_strategy": {
                "type": "string",
                "description": "Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "auto_devops_enabled": {
                "type": "bool",
                "description": "Enable Auto DevOps for this project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "autoclose_referenced_issues": {
                "type": "bool",
                "description": "Set whether auto-closing referenced issues on default branch.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "avatar": {
                "type": "string",
                "description": "A local path to the avatar image to upload. **Note**: not available for imported resources.",
                "description_kind": "markdown",
                "optional": true
              },
              "avatar_hash": {
                "type": "string",
                "description": "The hash of the avatar image. Use `filesha256(\"path/to/avatar.png\")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the avatar image.",
                "description_kind": "markdown",
                "computed": true
              },
              "build_coverage_regex": {
                "type": "string",
                "description": "Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.",
                "description_kind": "markdown",
                "deprecated": true,
                "optional": true
              },
              "build_git_strategy": {
                "type": "string",
                "description": "The Git strategy. Defaults to fetch.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "build_timeout": {
                "type": "number",
                "description": "The maximum amount of time, in seconds, that a job can run.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "builds_access_level": {
                "type": "string",
                "description": "Set the builds access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ci_config_path": {
                "type": "string",
                "description": "Custom Path to CI config file.",
                "description_kind": "markdown",
                "optional": true
              },
              "ci_default_git_depth": {
                "type": "number",
                "description": "Default number of revisions for shallow cloning.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ci_forward_deployment_enabled": {
                "type": "bool",
                "description": "When a new deployment job starts, skip older deployment jobs that are still pending.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ci_separated_caches": {
                "type": "bool",
                "description": "Use separate caches for protected branches.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "container_registry_access_level": {
                "type": "string",
                "description": "Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "container_registry_enabled": {
                "type": "bool",
                "description": "Enable container registry for the project.",
                "description_kind": "markdown",
                "deprecated": true,
                "optional": true,
                "computed": true
              },
              "default_branch": {
                "type": "string",
                "description": "The default branch for the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "description": {
                "type": "string",
                "description": "A description of the project.",
                "description_kind": "markdown",
                "optional": true
              },
              "emails_disabled": {
                "type": "bool",
                "description": "Disable email notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "external_authorization_classification_label": {
                "type": "string",
                "description": "The classification label for the project.",
                "description_kind": "markdown",
                "optional": true
              },
              "forked_from_project_id": {
                "type": "number",
                "description": "The id of the project to fork. During create the project is forked and during an update the fork relation is changed.",
                "description_kind": "markdown",
                "optional": true
              },
              "forking_access_level": {
                "type": "string",
                "description": "Set the forking access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "group_with_project_templates_id": {
                "type": "number",
                "description": "For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).",
                "description_kind": "markdown",
                "optional": true
              },
              "http_url_to_repo": {
                "type": "string",
                "description": "URL that can be provided to `git clone` to clone the",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "import_url": {
                "type": "string",
                "description": "Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using `terraform import`. See the examples section for how to properly use it.",
                "description_kind": "markdown",
                "optional": true
              },
              "import_url_password": {
                "type": "string",
                "description": "The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `terraform import`. See the examples section for how to properly use it.",
                "description_kind": "markdown",
                "optional": true,
                "sensitive": true
              },
              "import_url_username": {
                "type": "string",
                "description": "The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. This field cannot be imported using `terraform import`.  See the examples section for how to properly use it.",
                "description_kind": "markdown",
                "optional": true
              },
              "initialize_with_readme": {
                "type": "bool",
                "description": "Create main branch with first commit containing a README.md file.",
                "description_kind": "markdown",
                "optional": true
              },
              "issues_access_level": {
                "type": "string",
                "description": "Set the issues access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "issues_enabled": {
                "type": "bool",
                "description": "Enable issue tracking for the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "issues_template": {
                "type": "string",
                "description": "Sets the template for new issues in the project.",
                "description_kind": "markdown",
                "optional": true
              },
              "lfs_enabled": {
                "type": "bool",
                "description": "Enable LFS for the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "merge_commit_template": {
                "type": "string",
                "description": "Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)",
                "description_kind": "markdown",
                "optional": true
              },
              "merge_method": {
                "type": "string",
                "description": "Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "merge_pipelines_enabled": {
                "type": "bool",
                "description": "Enable or disable merge pipelines.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "merge_requests_access_level": {
                "type": "string",
                "description": "Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "merge_requests_enabled": {
                "type": "bool",
                "description": "Enable merge requests for the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "merge_requests_template": {
                "type": "string",
                "description": "Sets the template for new merge requests in the project.",
                "description_kind": "markdown",
                "optional": true
              },
              "merge_trains_enabled": {
                "type": "bool",
                "description": "Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mirror": {
                "type": "bool",
                "description": "Enable project pull mirror.",
                "description_kind": "markdown",
                "optional": true
              },
              "mirror_overwrites_diverged_branches": {
                "type": "bool",
                "description": "Enable overwrite diverged branches for a mirrored project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mirror_trigger_builds": {
                "type": "bool",
                "description": "Enable trigger builds on pushes for a mirrored project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "mr_default_target_self": {
                "type": "bool",
                "description": "For forked projects, target merge requests to this project. If false, the target will be the upstream project.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "namespace_id": {
                "type": "number",
                "description": "The namespace (group or user) of the project. Defaults to your user.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "only_allow_merge_if_all_discussions_are_resolved": {
                "type": "bool",
                "description": "Set to true if you want allow merges only if all discussions are resolved.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "only_allow_merge_if_pipeline_succeeds": {
                "type": "bool",
                "description": "Set to true if you want allow merges only if a pipeline succeeds.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "only_mirror_protected_branches": {
                "type": "bool",
                "description": "Enable only mirror protected branches for a mirrored project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "operations_access_level": {
                "type": "string",
                "description": "Set the operations access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "packages_enabled": {
                "type": "bool",
                "description": "Enable packages repository for the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "pages_access_level": {
                "type": "string",
                "description": "Enable pages access control",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "path": {
                "type": "string",
                "description": "The path of the repository.",
                "description_kind": "markdown",
                "optional": true
              },
              "path_with_namespace": {
                "type": "string",
                "description": "The path of the repository with namespace.",
                "description_kind": "markdown",
                "computed": true
              },
              "pipelines_enabled": {
                "type": "bool",
                "description": "Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.",
                "description_kind": "markdown",
                "deprecated": true,
                "optional": true,
                "computed": true
              },
              "printing_merge_request_link_enabled": {
                "type": "bool",
                "description": "Show link to create/view merge request when pushing from the command line",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "public_builds": {
                "type": "bool",
                "description": "If true, jobs can be viewed by non-project members.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "remove_source_branch_after_merge": {
                "type": "bool",
                "description": "Enable `Delete source branch` option by default for all new merge requests.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "repository_access_level": {
                "type": "string",
                "description": "Set the repository access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "repository_storage": {
                "type": "string",
                "description": "\tWhich storage shard the repository is on. (administrator only)",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "request_access_enabled": {
                "type": "bool",
                "description": "Allow users to request member access.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "requirements_access_level": {
                "type": "string",
                "description": "Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "resolve_outdated_diff_discussions": {
                "type": "bool",
                "description": "Automatically resolve merge request diffs discussions on lines changed with a push.",
                "description_kind": "markdown",
                "optional": true
              },
              "restrict_user_defined_variables": {
                "type": "bool",
                "description": "Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.",
                "description_kind": "markdown",
                "optional": true
              },
              "runners_token": {
                "type": "string",
                "description": "Registration token to use during runner setup.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "security_and_compliance_access_level": {
                "type": "string",
                "description": "Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "shared_runners_enabled": {
                "type": "bool",
                "description": "Enable shared runners for this project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "skip_wait_for_default_branch_protection": {
                "type": "bool",
                "description": "If `true`, the default behavior to wait for the default branch protection to be created is skipped.\nThis is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.\nThere is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.\nThis attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.\n",
                "description_kind": "markdown",
                "optional": true
              },
              "snippets_access_level": {
                "type": "string",
                "description": "Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "snippets_enabled": {
                "type": "bool",
                "description": "Enable snippets for the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "squash_commit_template": {
                "type": "string",
                "description": "Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)",
                "description_kind": "markdown",
                "optional": true
              },
              "squash_option": {
                "type": "string",
                "description": "Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab >= 14.1]",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ssh_url_to_repo": {
                "type": "string",
                "description": "URL that can be provided to `git clone` to clone the",
                "description_kind": "markdown",
                "computed": true
              },
              "suggestion_commit_message": {
                "type": "string",
                "description": "The commit message used to apply merge request suggestions.",
                "description_kind": "markdown",
                "optional": true
              },
              "tags": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "template_name": {
                "type": "string",
                "description": "When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `template_project_id`.",
                "description_kind": "markdown",
                "optional": true
              },
              "template_project_id": {
                "type": "number",
                "description": "When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab_group_project_file_template` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.",
                "description_kind": "markdown",
                "optional": true
              },
              "topics": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "The list of topics for the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "use_custom_template": {
                "type": "bool",
                "description": "Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).",
                "description_kind": "markdown",
                "optional": true
              },
              "visibility_level": {
                "type": "string",
                "description": "Set to `public` to create a public project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "URL that can be used to find the project in a browser.",
                "description_kind": "markdown",
                "computed": true
              },
              "wiki_access_level": {
                "type": "string",
                "description": "Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "wiki_enabled": {
                "type": "bool",
                "description": "Enable wiki for the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "block_types": {
              "container_expiration_policy": {
                "nesting_mode": "list",
                "block": {
                  "attributes": {
                    "cadence": {
                      "type": "string",
                      "description": "The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.",
                      "description_kind": "markdown",
                      "optional": true,
                      "computed": true
                    },
                    "enabled": {
                      "type": "bool",
                      "description": "If true, the policy is enabled.",
                      "description_kind": "markdown",
                      "optional": true,
                      "computed": true
                    },
                    "keep_n": {
                      "type": "number",
                      "description": "The number of images to keep.",
                      "description_kind": "markdown",
                      "optional": true,
                      "computed": true
                    },
                    "name_regex_delete": {
                      "type": "string",
                      "description": "The regular expression to match image names to delete. **Note**: the upstream API has some inconsistencies with the `name_regex` field here. It's basically unusable at the moment.",
                      "description_kind": "markdown",
                      "optional": true,
                      "computed": true
                    },
                    "name_regex_keep": {
                      "type": "string",
                      "description": "The regular expression to match image names to keep.",
                      "description_kind": "markdown",
                      "optional": true,
                      "computed": true
                    },
                    "next_run_at": {
                      "type": "string",
                      "description": "The next time the policy will run.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "older_than": {
                      "type": "string",
                      "description": "The number of days to keep images.",
                      "description_kind": "markdown",
                      "optional": true,
                      "computed": true
                    }
                  },
                  "description": "Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.",
                  "description_kind": "markdown"
                },
                "max_items": 1
              },
              "push_rules": {
                "nesting_mode": "list",
                "block": {
                  "attributes": {
                    "author_email_regex": {
                      "type": "string",
                      "description": "All commit author emails must match this regex, e.g. `@my-company.com$`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "branch_name_regex": {
                      "type": "string",
                      "description": "All branch names must match this regex, e.g. `(feature|hotfix)\\/*`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "commit_committer_check": {
                      "type": "bool",
                      "description": "Users can only push commits to this repository that were committed with one of their own verified emails.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "commit_message_negative_regex": {
                      "type": "string",
                      "description": "No commit message is allowed to match this regex, for example `ssh\\:\\/\\/`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "commit_message_regex": {
                      "type": "string",
                      "description": "All commit messages must match this regex, e.g. `Fixed \\d+\\..*`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "deny_delete_tag": {
                      "type": "bool",
                      "description": "Deny deleting a tag.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "file_name_regex": {
                      "type": "string",
                      "description": "All commited filenames must not match this regex, e.g. `(jar|exe)$`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "max_file_size": {
                      "type": "number",
                      "description": "Maximum file size (MB).",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "member_check": {
                      "type": "bool",
                      "description": "Restrict commits by author (email) to existing GitLab users.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "prevent_secrets": {
                      "type": "bool",
                      "description": "GitLab will reject any files that are likely to contain secrets.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "reject_unsigned_commits": {
                      "type": "bool",
                      "description": "Reject commit when it’s not signed through GPG.",
                      "description_kind": "markdown",
                      "optional": true
                    }
                  },
                  "description": "Push rules for the project.",
                  "description_kind": "markdown"
                },
                "max_items": 1
              }
            },
            "description": "The `gitlab_project` resource allows to manage the lifecycle of a project.\n\nA project can either be created in a group or user namespace.\n\n-> **Default Branch Protection Workaround** Projects are created with default branch protection.\nSince this default branch protection is not currently managed via Terraform, to workaround this limitation,\nyou can remove the default branch protection via the API and create your desired Terraform managed branch protection.\nIn the `gitlab_project` resource, define a `local-exec` provisioner which invokes\nthe `/projects/:id/protected_branches/:name` API via curl to delete the branch protection on the default\nbranch using a `DELETE` request. Then define the desired branch protection using the `gitlab_branch_protection` resource.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/projects.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_access_token": {
          "version": 0,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "The access level for the project access token. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`. Default is `maintainer`.",
                "description_kind": "markdown",
                "optional": true
              },
              "active": {
                "type": "bool",
                "description": "True if the token is active.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Time the token has been created, RFC3339 format.",
                "description_kind": "markdown",
                "computed": true
              },
              "expires_at": {
                "type": "string",
                "description": "Time the token will expire it, YYYY-MM-DD format. Will not expire per default.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "A name to describe the project access token.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The id of the project to add the project access token to.",
                "description_kind": "markdown",
                "required": true
              },
              "revoked": {
                "type": "bool",
                "description": "True if the token is revoked.",
                "description_kind": "markdown",
                "computed": true
              },
              "scopes": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "Valid values: `api`, `read_api`, `read_repository`, `write_repository`, `read_registry`, `write_registry`.",
                "description_kind": "markdown",
                "required": true
              },
              "token": {
                "type": "string",
                "description": "The secret token. **Note**: the token is not available for imported resources.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "user_id": {
                "type": "number",
                "description": "The user_id associated to the token.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_access_token` resource allows to manage the lifecycle of a project access token.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/project_access_tokens.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_approval_rule": {
          "version": 0,
          "block": {
            "attributes": {
              "approvals_required": {
                "type": "number",
                "description": "The number of approvals required for this rule.",
                "description_kind": "markdown",
                "required": true
              },
              "disable_importing_default_any_approver_rule_on_create": {
                "type": "bool",
                "description": "When this flag is set, the default `any_approver` rule will not be imported if present.",
                "description_kind": "markdown",
                "optional": true
              },
              "group_ids": {
                "type": [
                  "set",
                  "number"
                ],
                "description": "A list of group IDs whose members can approve of the merge request.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the approval rule.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the approval rules.",
                "description_kind": "markdown",
                "required": true
              },
              "protected_branch_ids": {
                "type": [
                  "set",
                  "number"
                ],
                "description": "A list of protected branch IDs (not branch names) for which the rule applies.",
                "description_kind": "markdown",
                "optional": true
              },
              "rule_type": {
                "type": "string",
                "description": "String, defaults to 'regular'. The type of rule. `any_approver` is a pre-configured default rule with `approvals_required` at `0`. Valid values are `regular`, `any_approver`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "user_ids": {
                "type": [
                  "set",
                  "number"
                ],
                "description": "A list of specific User IDs to add to the list of approvers.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_project_approval_rule` resource allows to manage the lifecycle of a project-level approval rule.\n\n-> This resource requires a GitLab Enterprise instance.\n\n~> A project is limited to one \"any_approver\" rule at a time, any attempt to create a second rule of type \"any_approver\" will fail. As a result, if \n   an \"any_approver\" rule is already present on a project at creation time, and that rule requires 0 approvers, the rule will be automatically imported\n   to prevent a common error with this resource.\n\n~> Since a project is limited to one \"any_approver\" rule, attempting to add two \"any_approver\" rules to the same project in terraform will result in \n   terraform identifying changes with every \"plan\" operation, and may result in an error during the \"apply\" operation.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/merge_request_approvals.html#project-level-mr-approvals)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_badge": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "image_url": {
                "type": "string",
                "description": "The image url which will be presented on project overview.",
                "description_kind": "markdown",
                "required": true
              },
              "link_url": {
                "type": "string",
                "description": "The url linked with the badge.",
                "description_kind": "markdown",
                "required": true
              },
              "name": {
                "type": "string",
                "description": "The name of the badge.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The id of the project to add the badge to.",
                "description_kind": "markdown",
                "required": true
              },
              "rendered_image_url": {
                "type": "string",
                "description": "The image_url argument rendered (in case of use of placeholders).",
                "description_kind": "markdown",
                "computed": true
              },
              "rendered_link_url": {
                "type": "string",
                "description": "The link_url argument rendered (in case of use of placeholders).",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_badge` resource allows to mange the lifecycle of project badges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/user/project/badges.html#project-badges)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_cluster": {
          "version": 0,
          "block": {
            "attributes": {
              "cluster_type": {
                "type": "string",
                "description": "Cluster type.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Create time.",
                "description_kind": "markdown",
                "computed": true
              },
              "domain": {
                "type": "string",
                "description": "The base domain of the cluster.",
                "description_kind": "markdown",
                "optional": true
              },
              "enabled": {
                "type": "bool",
                "description": "Determines if cluster is active or not. Defaults to `true`. This attribute cannot be read.",
                "description_kind": "markdown",
                "optional": true
              },
              "environment_scope": {
                "type": "string",
                "description": "The associated environment to the cluster. Defaults to `*`.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "kubernetes_api_url": {
                "type": "string",
                "description": "The URL to access the Kubernetes API.",
                "description_kind": "markdown",
                "required": true
              },
              "kubernetes_authorization_type": {
                "type": "string",
                "description": "The cluster authorization type. Valid values are `rbac`, `abac`, `unknown_authorization`. Defaults to `rbac`.",
                "description_kind": "markdown",
                "optional": true
              },
              "kubernetes_ca_cert": {
                "type": "string",
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate).",
                "description_kind": "markdown",
                "optional": true
              },
              "kubernetes_namespace": {
                "type": "string",
                "description": "The unique namespace related to the project.",
                "description_kind": "markdown",
                "optional": true
              },
              "kubernetes_token": {
                "type": "string",
                "description": "The token to authenticate against Kubernetes.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "managed": {
                "type": "bool",
                "description": "Determines if cluster is managed by gitlab or not. Defaults to `true`. This attribute cannot be read.",
                "description_kind": "markdown",
                "optional": true
              },
              "management_project_id": {
                "type": "string",
                "description": "The ID of the management project for the cluster.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of cluster.",
                "description_kind": "markdown",
                "required": true
              },
              "platform_type": {
                "type": "string",
                "description": "Platform type.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The id of the project to add the cluster to.",
                "description_kind": "markdown",
                "required": true
              },
              "provider_type": {
                "type": "string",
                "description": "Provider type.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_cluster` resource allows to manage the lifecycle of a project cluster.\n\n~> This is deprecated GitLab feature since 14.5\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_clusters.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_custom_attribute": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "Key for the Custom Attribute.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "number",
                "description": "The id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "value": {
                "type": "string",
                "description": "Value for the Custom Attribute.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_project_custom_attribute` resource allows to manage custom attributes for a project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/custom_attributes.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_environment": {
          "version": 0,
          "block": {
            "attributes": {
              "created_at": {
                "type": "string",
                "description": "The ISO8601 date/time that this environment was created at in UTC.",
                "description_kind": "markdown",
                "computed": true
              },
              "external_url": {
                "type": "string",
                "description": "Place to link to for this environment.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the environment.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The ID or full path of the project to environment is created for.",
                "description_kind": "markdown",
                "required": true
              },
              "slug": {
                "type": "string",
                "description": "The name of the environment in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.",
                "description_kind": "markdown",
                "computed": true
              },
              "state": {
                "type": "string",
                "description": "State the environment is in. Valid values are `available`, `stopped`.",
                "description_kind": "markdown",
                "computed": true
              },
              "stop_before_destroy": {
                "type": "bool",
                "description": "Determines whether the environment is attempted to be stopped before the environment is deleted.",
                "description_kind": "markdown",
                "optional": true
              },
              "updated_at": {
                "type": "string",
                "description": "The ISO8601 date/time that this environment was last updated at in UTC.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_environment` resource allows to manage the lifecycle of an environment in a project.\n\n-> During a terraform destroy this resource by default will not attempt to stop the environment first.\nAn environment is required to be in a stopped state before a deletetion of the environment can occur.\nSet the `stop_before_destroy` flag to attempt to automatically stop the environment before deletion.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/environments.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_freeze_period": {
          "version": 0,
          "block": {
            "attributes": {
              "cron_timezone": {
                "type": "string",
                "description": "The timezone.",
                "description_kind": "markdown",
                "optional": true
              },
              "freeze_end": {
                "type": "string",
                "description": "End of the Freeze Period in cron format (e.g. `0 2 * * *`).",
                "description_kind": "markdown",
                "required": true
              },
              "freeze_start": {
                "type": "string",
                "description": "Start of the Freeze Period in cron format (e.g. `0 1 * * *`).",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project_id": {
                "type": "string",
                "description": "The id of the project to add the schedule to.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_project_freeze_period` resource allows to manage the lifecycle of a freeze period for a project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/freeze_periods.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_hook": {
          "version": 0,
          "block": {
            "attributes": {
              "confidential_issues_events": {
                "type": "bool",
                "description": "Invoke the hook for confidential issues events.",
                "description_kind": "markdown",
                "optional": true
              },
              "confidential_note_events": {
                "type": "bool",
                "description": "Invoke the hook for confidential notes events.",
                "description_kind": "markdown",
                "optional": true
              },
              "deployment_events": {
                "type": "bool",
                "description": "Invoke the hook for deployment events.",
                "description_kind": "markdown",
                "optional": true
              },
              "enable_ssl_verification": {
                "type": "bool",
                "description": "Enable ssl verification when invoking the hook.",
                "description_kind": "markdown",
                "optional": true
              },
              "hook_id": {
                "type": "number",
                "description": "The id of the project hook.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "issues_events": {
                "type": "bool",
                "description": "Invoke the hook for issues events.",
                "description_kind": "markdown",
                "optional": true
              },
              "job_events": {
                "type": "bool",
                "description": "Invoke the hook for job events.",
                "description_kind": "markdown",
                "optional": true
              },
              "merge_requests_events": {
                "type": "bool",
                "description": "Invoke the hook for merge requests.",
                "description_kind": "markdown",
                "optional": true
              },
              "note_events": {
                "type": "bool",
                "description": "Invoke the hook for notes events.",
                "description_kind": "markdown",
                "optional": true
              },
              "pipeline_events": {
                "type": "bool",
                "description": "Invoke the hook for pipeline events.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the hook to.",
                "description_kind": "markdown",
                "required": true
              },
              "project_id": {
                "type": "number",
                "description": "The id of the project for the hook.",
                "description_kind": "markdown",
                "computed": true
              },
              "push_events": {
                "type": "bool",
                "description": "Invoke the hook for push events.",
                "description_kind": "markdown",
                "optional": true
              },
              "push_events_branch_filter": {
                "type": "string",
                "description": "Invoke the hook for push events on matching branches only.",
                "description_kind": "markdown",
                "optional": true
              },
              "releases_events": {
                "type": "bool",
                "description": "Invoke the hook for releases events.",
                "description_kind": "markdown",
                "optional": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "Invoke the hook for tag push events.",
                "description_kind": "markdown",
                "optional": true
              },
              "token": {
                "type": "string",
                "description": "A token to present when invoking the hook. The token is not available for imported resources.",
                "description_kind": "markdown",
                "optional": true,
                "sensitive": true
              },
              "url": {
                "type": "string",
                "description": "The url of the hook to invoke.",
                "description_kind": "markdown",
                "required": true
              },
              "wiki_page_events": {
                "type": "bool",
                "description": "Invoke the hook for wiki page events.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_project_hook` resource allows to manage the lifecycle of a project hook.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#hooks)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_issue": {
          "version": 0,
          "block": {
            "attributes": {
              "assignee_ids": {
                "type": [
                  "set",
                  "number"
                ],
                "description": "The IDs of the users to assign the issue to.",
                "description_kind": "markdown",
                "optional": true
              },
              "author_id": {
                "type": "number",
                "description": "The ID of the author of the issue. Use `gitlab_user` data source to get more information about the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "closed_at": {
                "type": "string",
                "description": "When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.",
                "description_kind": "markdown",
                "computed": true
              },
              "closed_by_user_id": {
                "type": "number",
                "description": "The ID of the user that closed the issue. Use `gitlab_user` data source to get more information about the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "confidential": {
                "type": "bool",
                "description": "Set an issue to be confidential.",
                "description_kind": "markdown",
                "optional": true
              },
              "created_at": {
                "type": "string",
                "description": "When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "delete_on_destroy": {
                "type": "bool",
                "description": "Whether the issue is deleted instead of closed during destroy.",
                "description_kind": "markdown",
                "optional": true
              },
              "description": {
                "type": "string",
                "description": "The description of an issue. Limited to 1,048,576 characters.",
                "description_kind": "markdown",
                "optional": true
              },
              "discussion_locked": {
                "type": "bool",
                "description": "Whether the issue is locked for discussions or not.",
                "description_kind": "markdown",
                "optional": true
              },
              "discussion_to_resolve": {
                "type": "string",
                "description": "The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of.",
                "description_kind": "markdown",
                "optional": true
              },
              "downvotes": {
                "type": "number",
                "description": "The number of downvotes the issue has received.",
                "description_kind": "markdown",
                "computed": true
              },
              "due_date": {
                "type": "string",
                "description": "The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.\n**Note:** removing a due date is currently not supported, see https://github.com/xanzy/go-gitlab/issues/1384 for details.\n\t\t\t\t",
                "description_kind": "markdown",
                "optional": true
              },
              "epic_id": {
                "type": "number",
                "description": "ID of the epic to add the issue to. Valid values are greater than or equal to 0.",
                "description_kind": "markdown",
                "computed": true
              },
              "epic_issue_id": {
                "type": "number",
                "description": "The ID of the epic issue.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "external_id": {
                "type": "string",
                "description": "The external ID of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "human_time_estimate": {
                "type": "string",
                "description": "The human-readable time estimate of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "human_total_time_spent": {
                "type": "string",
                "description": "The human-readable total time spent of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "iid": {
                "type": "number",
                "description": "The internal ID of the project's issue.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "issue_id": {
                "type": "number",
                "description": "The instance-wide ID of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "issue_link_id": {
                "type": "number",
                "description": "The ID of the issue link.",
                "description_kind": "markdown",
                "computed": true
              },
              "issue_type": {
                "type": "string",
                "description": "The type of issue. Valid values are: `issue`, `incident`, `test_case`.",
                "description_kind": "markdown",
                "optional": true
              },
              "labels": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "The labels of an issue.",
                "description_kind": "markdown",
                "optional": true
              },
              "links": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "The links of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_request_to_resolve_discussions_of": {
                "type": "number",
                "description": "The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.",
                "description_kind": "markdown",
                "optional": true
              },
              "merge_requests_count": {
                "type": "number",
                "description": "The number of merge requests associated with the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "milestone_id": {
                "type": "number",
                "description": "The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue's details.",
                "description_kind": "markdown",
                "optional": true
              },
              "moved_to_id": {
                "type": "number",
                "description": "The ID of the issue that was moved to.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or ID of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "references": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "The references of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "state": {
                "type": "string",
                "description": "The state of the issue. Valid values are: `opened`, `closed`.",
                "description_kind": "markdown",
                "optional": true
              },
              "subscribed": {
                "type": "bool",
                "description": "Whether the authenticated user is subscribed to the issue or not.",
                "description_kind": "markdown",
                "computed": true
              },
              "task_completion_status": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "completed_count": "number",
                      "count": "number"
                    }
                  ]
                ],
                "description": "The task completion status. It's always a one element list.",
                "description_kind": "markdown",
                "computed": true
              },
              "time_estimate": {
                "type": "number",
                "description": "The time estimate of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "title": {
                "type": "string",
                "description": "The title of the issue.",
                "description_kind": "markdown",
                "required": true
              },
              "total_time_spent": {
                "type": "number",
                "description": "The total time spent of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "updated_at": {
                "type": "string",
                "description": "When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "upvotes": {
                "type": "number",
                "description": "The number of upvotes the issue has received.",
                "description_kind": "markdown",
                "computed": true
              },
              "user_notes_count": {
                "type": "number",
                "description": "The number of user notes on the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "The web URL of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "weight": {
                "type": "number",
                "description": "The weight of the issue. Valid values are greater than or equal to 0.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_project_issue` resource allows to manage the lifecycle of an issue within a project.\n\n-> During a terraform destroy this resource will close the issue. Set the delete_on_destroy flag to true to delete the issue instead of closing it.\n\n~> **Experimental** While the base functionality of this resource works, it may be subject to minor change.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)\n\t\t",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_issue_board": {
          "version": 0,
          "block": {
            "attributes": {
              "assignee_id": {
                "type": "number",
                "description": "The assignee the board should be scoped to. Requires a GitLab EE license.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "labels": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "The list of label names which the board should be scoped to. Requires a GitLab EE license.",
                "description_kind": "markdown",
                "optional": true
              },
              "milestone_id": {
                "type": "number",
                "description": "The milestone the board should be scoped to. Requires a GitLab EE license.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of the board.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The ID or full path of the project maintained by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "weight": {
                "type": "number",
                "description": "The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "block_types": {
              "lists": {
                "nesting_mode": "list",
                "block": {
                  "attributes": {
                    "assignee_id": {
                      "type": "number",
                      "description": "The ID of the assignee the list should be scoped to. Requires a GitLab EE license.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "id": {
                      "type": "number",
                      "description": "The ID of the list",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "iteration_id": {
                      "type": "number",
                      "description": "The ID of the iteration the list should be scoped to. Requires a GitLab EE license.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "label_id": {
                      "type": "number",
                      "description": "The ID of the label the list should be scoped to. Requires a GitLab EE license.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "milestone_id": {
                      "type": "number",
                      "description": "The ID of the milestone the list should be scoped to. Requires a GitLab EE license.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "position": {
                      "type": "number",
                      "description": "The position of the list within the board. The position for the list is based on the its position in the `lists` array.",
                      "description_kind": "markdown",
                      "computed": true
                    }
                  },
                  "description": "The list of issue board lists",
                  "description_kind": "markdown"
                }
              }
            },
            "description": "The `gitlab_project_issue_board` resource allows to manage the lifecycle of a Project Issue Board.\n\n~> **NOTE:** If the board lists are changed all lists will be recreated.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/boards.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_level_mr_approvals": {
          "version": 0,
          "block": {
            "attributes": {
              "disable_overriding_approvers_per_merge_request": {
                "type": "bool",
                "description": "By default, users are able to edit the approval rules in merge requests. If set to true,",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "merge_requests_author_approval": {
                "type": "bool",
                "description": "Set to `true` if you want to allow merge request authors to self-approve merge requests. Authors",
                "description_kind": "markdown",
                "optional": true
              },
              "merge_requests_disable_committers_approval": {
                "type": "bool",
                "description": "Set to `true` if you want to prevent approval of merge requests by merge request committers.",
                "description_kind": "markdown",
                "optional": true
              },
              "project_id": {
                "type": "number",
                "description": "The ID of the project to change MR approval configuration.",
                "description_kind": "markdown",
                "required": true
              },
              "require_password_to_approve": {
                "type": "bool",
                "description": "Set to `true` if you want to require authentication when approving a merge request.",
                "description_kind": "markdown",
                "optional": true
              },
              "reset_approvals_on_push": {
                "type": "bool",
                "description": "Set to `true` if you want to remove all approvals in a merge request when new commits are pushed to its source branch. Default is `true`.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_project_level_mr_approval_rule` resource allows to manage the lifecycle of a Merge Request-level approval rule.\n\n-> This resource requires a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/merge_request_approvals.html#merge-request-level-mr-approvals)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_membership": {
          "version": 0,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`",
                "description_kind": "markdown",
                "required": true
              },
              "expires_at": {
                "type": "string",
                "description": "Expiration date for the project membership. Format: `YYYY-MM-DD`",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project_id": {
                "type": "string",
                "description": "The id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "user_id": {
                "type": "number",
                "description": "The id of the user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_project_membership` resource allows to manage the lifecycle of a users project membersip.\n\n-> If a project should grant membership to an entire group use the `gitlab_project_share_group` resource instead.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_milestone": {
          "version": 0,
          "block": {
            "attributes": {
              "created_at": {
                "type": "string",
                "description": "The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.",
                "description_kind": "markdown",
                "computed": true
              },
              "description": {
                "type": "string",
                "description": "The description of the milestone.",
                "description_kind": "markdown",
                "optional": true
              },
              "due_date": {
                "type": "string",
                "description": "The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.",
                "description_kind": "markdown",
                "optional": true
              },
              "expired": {
                "type": "bool",
                "description": "Bool, true if milestore expired.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "iid": {
                "type": "number",
                "description": "The ID of the project's milestone.",
                "description_kind": "markdown",
                "computed": true
              },
              "milestone_id": {
                "type": "number",
                "description": "The instance-wide ID of the project’s milestone.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "project_id": {
                "type": "number",
                "description": "The project ID of milestone.",
                "description_kind": "markdown",
                "computed": true
              },
              "start_date": {
                "type": "string",
                "description": "The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.",
                "description_kind": "markdown",
                "optional": true
              },
              "state": {
                "type": "string",
                "description": "The state of the milestone. Valid values are: `active`, `closed`.",
                "description_kind": "markdown",
                "optional": true
              },
              "title": {
                "type": "string",
                "description": "The title of a milestone.",
                "description_kind": "markdown",
                "required": true
              },
              "updated_at": {
                "type": "string",
                "description": "The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.",
                "description_kind": "markdown",
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "The web URL of the milestone.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_milestone` resource allows to manage the lifecycle of a project milestone.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_mirror": {
          "version": 0,
          "block": {
            "attributes": {
              "enabled": {
                "type": "bool",
                "description": "Determines if the mirror is enabled.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "keep_divergent_refs": {
                "type": "bool",
                "description": "Determines if divergent refs are skipped.",
                "description_kind": "markdown",
                "optional": true
              },
              "mirror_id": {
                "type": "number",
                "description": "Mirror ID.",
                "description_kind": "markdown",
                "computed": true
              },
              "only_protected_branches": {
                "type": "bool",
                "description": "Determines if only protected branches are mirrored.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "url": {
                "type": "string",
                "description": "The URL of the remote repository to be mirrored.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              }
            },
            "description": "The `gitlab_project_mirror` resource allows to manage the lifecycle of a project mirror.\n\nThis is for *pushing* changes to a remote repository. *Pull Mirroring* can be configured using a combination of the\nimport_url, mirror, and mirror_trigger_builds properties on the gitlab_project resource.\n\n-> **Destroy Behavior** GitLab 14.10 introduced an API endpoint to delete a project mirror.\n   Therefore, for GitLab 14.10 and newer the project mirror will be destroyed when the resource is destroyed.\n   For older versions, the mirror will be disabled and the resource will be destroyed.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/remote_mirrors.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_protected_environment": {
          "version": 0,
          "block": {
            "attributes": {
              "environment": {
                "type": "string",
                "description": "The name of the environment.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description": "The ID of this Terraform resource. In the format of `<project>:<environment-name>`.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The ID or full path of the project which the protected environment is created against.",
                "description_kind": "markdown",
                "required": true
              },
              "required_approval_count": {
                "type": "number",
                "description": "The number of approvals required to deploy to this environment.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "block_types": {
              "deploy_access_levels": {
                "nesting_mode": "set",
                "block": {
                  "attributes": {
                    "access_level": {
                      "type": "string",
                      "description": "Levels of access required to deploy to this protected environment. Valid values are `developer`, `maintainer`.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "access_level_description": {
                      "type": "string",
                      "description": "Readable description of level of access.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "group_id": {
                      "type": "number",
                      "description": "The ID of the group allowed to deploy to this protected environment. The project must be shared with the group.",
                      "description_kind": "markdown",
                      "optional": true
                    },
                    "user_id": {
                      "type": "number",
                      "description": "The ID of the user allowed to deploy to this protected environment. The user must be a member of the project.",
                      "description_kind": "markdown",
                      "optional": true
                    }
                  },
                  "description": "Array of access levels allowed to deploy, with each described by a hash.",
                  "description_kind": "markdown"
                }
              }
            },
            "description": "The `gitlab_project_protected_environment` resource allows to manage the lifecycle of a protected environment in a project.\n\n~> In order to use a user or group in the `deploy_access_levels` configuration,\n   you need to make sure that users have access to the project and groups must have this project shared.\n   You may use the `gitlab_project_membership` and `gitlab_project_shared_group` resources to achieve this.\n   Unfortunately, the GitLab API does not complain about users and groups without access to the project and just ignores those.\n   In case this happens you will get perpetual state diffs.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_environments.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_runner_enablement": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "runner_id": {
                "type": "number",
                "description": "The ID of a runner to enable for the project.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_project_runner_enablement` resource allows to enable a runner in a project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/runners.html#enable-a-runner-in-project)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_share_group": {
          "version": 1,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`",
                "description_kind": "markdown",
                "deprecated": true,
                "optional": true
              },
              "group_access": {
                "type": "string",
                "description": "The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `reporter`, `developer`, `maintainer`, `owner`, `master`",
                "description_kind": "markdown",
                "optional": true
              },
              "group_id": {
                "type": "number",
                "description": "The id of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project_id": {
                "type": "string",
                "description": "The id of the project.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_project_share_group` resource allows to manage the lifecycle of project shared with a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#share-project-with-group)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_tag": {
          "version": 0,
          "block": {
            "attributes": {
              "commit": {
                "type": [
                  "set",
                  [
                    "object",
                    {
                      "author_email": "string",
                      "author_name": "string",
                      "authored_date": "string",
                      "committed_date": "string",
                      "committer_email": "string",
                      "committer_name": "string",
                      "id": "string",
                      "message": "string",
                      "parent_ids": [
                        "set",
                        "string"
                      ],
                      "short_id": "string",
                      "title": "string"
                    }
                  ]
                ],
                "description": "The commit associated with the tag.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "message": {
                "type": "string",
                "description": "The message of the annotated tag.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of a tag.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "protected": {
                "type": "bool",
                "description": "Bool, true if tag has tag protection.",
                "description_kind": "markdown",
                "computed": true
              },
              "ref": {
                "type": "string",
                "description": "Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.",
                "description_kind": "markdown",
                "required": true
              },
              "release": {
                "type": [
                  "set",
                  [
                    "object",
                    {
                      "description": "string",
                      "tag_name": "string"
                    }
                  ]
                ],
                "description": "The release associated with the tag.",
                "description_kind": "markdown",
                "computed": true
              },
              "target": {
                "type": "string",
                "description": "The unique id assigned to the commit by Gitlab.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_tag` resource allows to manage the lifecycle of a tag in a project.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_variable": {
          "version": 0,
          "block": {
            "attributes": {
              "environment_scope": {
                "type": "string",
                "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The name of the variable.",
                "description_kind": "markdown",
                "required": true
              },
              "masked": {
                "type": "bool",
                "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "protected": {
                "type": "bool",
                "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "value": {
                "type": "string",
                "description": "The value of the variable.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "variable_type": {
                "type": "string",
                "description": "The type of a variable. Valid values are: `env_var`, `file`. Default is `env_var`.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_project_variable` resource allows to manage the lifecycle of a CI/CD variable for a project.\n\n~> **Important:** If your GitLab version is older than 13.4, you may see nondeterministic behavior when updating or deleting gitlab_project_variable resources with non-unique keys, for example if there is another variable with the same key and different environment scope. See [this GitLab issue](https://gitlab.com/gitlab-org/gitlab/-/issues/9912).\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_release_link": {
          "version": 0,
          "block": {
            "attributes": {
              "direct_asset_url": {
                "type": "string",
                "description": "Full path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).",
                "description_kind": "markdown",
                "computed": true
              },
              "external": {
                "type": "bool",
                "description": "External or internal link.",
                "description_kind": "markdown",
                "computed": true
              },
              "filepath": {
                "type": "string",
                "description": "Relative path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "link_id": {
                "type": "number",
                "description": "The ID of the link.",
                "description_kind": "markdown",
                "computed": true
              },
              "link_type": {
                "type": "string",
                "description": "The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of the link. Link names must be unique within the release.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).",
                "description_kind": "markdown",
                "required": true
              },
              "tag_name": {
                "type": "string",
                "description": "The tag associated with the Release.",
                "description_kind": "markdown",
                "required": true
              },
              "url": {
                "type": "string",
                "description": "The URL of the link. Link URLs must be unique within the release.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_release_link` resource allows to manage the lifecycle of a release link.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_repository_file": {
          "version": 0,
          "block": {
            "attributes": {
              "author_email": {
                "type": "string",
                "description": "Email of the commit author.",
                "description_kind": "markdown",
                "optional": true
              },
              "author_name": {
                "type": "string",
                "description": "Name of the commit author.",
                "description_kind": "markdown",
                "optional": true
              },
              "blob_id": {
                "type": "string",
                "description": "The blob id.",
                "description_kind": "markdown",
                "computed": true
              },
              "branch": {
                "type": "string",
                "description": "Name of the branch to which to commit to.",
                "description_kind": "markdown",
                "required": true
              },
              "commit_id": {
                "type": "string",
                "description": "The commit id.",
                "description_kind": "markdown",
                "computed": true
              },
              "commit_message": {
                "type": "string",
                "description": "Commit message.",
                "description_kind": "markdown",
                "required": true
              },
              "content": {
                "type": "string",
                "description": "File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).",
                "description_kind": "markdown",
                "required": true
              },
              "content_sha256": {
                "type": "string",
                "description": "File content sha256 digest.",
                "description_kind": "markdown",
                "computed": true
              },
              "encoding": {
                "type": "string",
                "description": "The file content encoding.",
                "description_kind": "markdown",
                "computed": true
              },
              "execute_filemode": {
                "type": "bool",
                "description": "Enables or disables the execute flag on the file. **Note**: requires GitLab 14.10 or newer.",
                "description_kind": "markdown",
                "optional": true
              },
              "file_name": {
                "type": "string",
                "description": "The filename.",
                "description_kind": "markdown",
                "computed": true
              },
              "file_path": {
                "type": "string",
                "description": "The full path of the file. It must be relative to the root of the project without a leading slash `/`.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "last_commit_id": {
                "type": "string",
                "description": "The last known commit id.",
                "description_kind": "markdown",
                "computed": true
              },
              "overwrite_on_create": {
                "type": "bool",
                "description": "Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The name or ID of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "ref": {
                "type": "string",
                "description": "The name of branch, tag or commit.",
                "description_kind": "markdown",
                "computed": true
              },
              "size": {
                "type": "number",
                "description": "The file size.",
                "description_kind": "markdown",
                "computed": true
              },
              "start_branch": {
                "type": "string",
                "description": "Name of the branch to start the new commit from.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "block_types": {
              "timeouts": {
                "nesting_mode": "single",
                "block": {
                  "attributes": {
                    "create": {
                      "type": "string",
                      "description_kind": "plain",
                      "optional": true
                    },
                    "delete": {
                      "type": "string",
                      "description_kind": "plain",
                      "optional": true
                    },
                    "update": {
                      "type": "string",
                      "description_kind": "plain",
                      "optional": true
                    }
                  },
                  "description_kind": "plain"
                }
              }
            },
            "description": "The `gitlab_repository_file` resource allows to manage the lifecycle of a file within a repository.\n\n-> **Timeouts** Default timeout for *Create*, *Update* and *Delete* is one minute and can be configured in the `timeouts` block.\n\n-> **Implementation Detail** GitLab is unable to handle concurrent calls to the GitLab repository files API for the same project.\n   Therefore, this resource queues every call to the repository files API no matter of the project, which may slow down the terraform\n   execution time for some configurations. In addition, retries are performed in case a refresh is required because another application\n   changed the repository at the same time.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_runner": {
          "version": 0,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "The access_level of the runner. Valid values are: `not_protected`, `ref_protected`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "authentication_token": {
                "type": "string",
                "description": "The authentication token used for building a config.toml file. This value is not present when imported.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "description": {
                "type": "string",
                "description": "The runner's description.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "locked": {
                "type": "bool",
                "description": "Whether the runner should be locked for current project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "maximum_timeout": {
                "type": "number",
                "description": "Maximum timeout set when this runner handles the job.",
                "description_kind": "markdown",
                "optional": true
              },
              "paused": {
                "type": "bool",
                "description": "Whether the runner should ignore new jobs.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "registration_token": {
                "type": "string",
                "description": "The registration token used to register the runner.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "run_untagged": {
                "type": "bool",
                "description": "Whether the runner should handle untagged jobs.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "status": {
                "type": "string",
                "description": "The status of runners to show, one of: online and offline. active and paused are also possible values\n\t\t\t\t              which were deprecated in GitLab 14.8 and will be removed in GitLab 16.0.",
                "description_kind": "markdown",
                "computed": true
              },
              "tag_list": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "List of runner’s tags.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_runner` resource allows to manage the lifecycle of a runner.\n\t\t\nA runner can either be registered at an instance level or group level. \nThe runner will be registered at a group level if the token used is from a group, or at an instance level if the token used is for the instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/runners.html#register-a-new-runner)",
            "description_kind": "markdown"
          }
        },
        "gitlab_service_emails_on_push": {
          "version": 0,
          "block": {
            "attributes": {
              "active": {
                "type": "bool",
                "description": "Whether the integration is active.",
                "description_kind": "markdown",
                "computed": true
              },
              "branches_to_be_notified": {
                "type": "string",
                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, `default_and_protected`. Notifications are always fired for tag pushes.",
                "description_kind": "markdown",
                "optional": true
              },
              "created_at": {
                "type": "string",
                "description": "The ISO8601 date/time that this integration was activated at in UTC.",
                "description_kind": "markdown",
                "computed": true
              },
              "disable_diffs": {
                "type": "bool",
                "description": "Disable code diffs.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "ID or full-path of the project you want to activate integration on.",
                "description_kind": "markdown",
                "required": true
              },
              "push_events": {
                "type": "bool",
                "description": "Enable notifications for push events.",
                "description_kind": "markdown",
                "optional": true
              },
              "recipients": {
                "type": "string",
                "description": "Emails separated by whitespace.",
                "description_kind": "markdown",
                "required": true
              },
              "send_from_committer_email": {
                "type": "bool",
                "description": "Send from committer.",
                "description_kind": "markdown",
                "optional": true
              },
              "slug": {
                "type": "string",
                "description": "The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.",
                "description_kind": "markdown",
                "computed": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "Enable notifications for tag push events.",
                "description_kind": "markdown",
                "optional": true
              },
              "title": {
                "type": "string",
                "description": "Title of the integration.",
                "description_kind": "markdown",
                "computed": true
              },
              "updated_at": {
                "type": "string",
                "description": "The ISO8601 date/time that this integration was last updated at in UTC.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_service_emails_on_push` resource allows to manage the lifecycle of a project integration with Emails on Push Service.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#emails-on-push)",
            "description_kind": "markdown"
          }
        },
        "gitlab_service_external_wiki": {
          "version": 0,
          "block": {
            "attributes": {
              "active": {
                "type": "bool",
                "description": "Whether the integration is active.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "The ISO8601 date/time that this integration was activated at in UTC.",
                "description_kind": "markdown",
                "computed": true
              },
              "external_wiki_url": {
                "type": "string",
                "description": "The URL of the external wiki.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "ID of the project you want to activate integration on.",
                "description_kind": "markdown",
                "required": true
              },
              "slug": {
                "type": "string",
                "description": "The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.",
                "description_kind": "markdown",
                "computed": true
              },
              "title": {
                "type": "string",
                "description": "Title of the integration.",
                "description_kind": "markdown",
                "computed": true
              },
              "updated_at": {
                "type": "string",
                "description": "The ISO8601 date/time that this integration was last updated at in UTC.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_service_external_wiki` resource allows to manage the lifecycle of a project integration with External Wiki Service.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#external-wiki)",
            "description_kind": "markdown"
          }
        },
        "gitlab_service_github": {
          "version": 0,
          "block": {
            "attributes": {
              "active": {
                "type": "bool",
                "description": "Whether the integration is active.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Create time.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "ID of the project you want to activate integration on.",
                "description_kind": "markdown",
                "required": true
              },
              "repository_url": {
                "type": "string",
                "description": "The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.",
                "description_kind": "markdown",
                "required": true
              },
              "static_context": {
                "type": "bool",
                "description": "Append instance name instead of branch to the status. Must enable to set a GitLab status check as _required_ in GitHub. See [Static / dynamic status check names] to learn more.",
                "description_kind": "markdown",
                "optional": true
              },
              "title": {
                "type": "string",
                "description": "Title.",
                "description_kind": "markdown",
                "computed": true
              },
              "token": {
                "type": "string",
                "description": "A GitHub personal access token with at least `repo:status` scope.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "updated_at": {
                "type": "string",
                "description": "Update time.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_service_github` resource allows to manage the lifecycle of a project integration with GitHub.\n\n-> This resource requires a GitLab Enterprise instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#github)",
            "description_kind": "markdown"
          }
        },
        "gitlab_service_jira": {
          "version": 0,
          "block": {
            "attributes": {
              "active": {
                "type": "bool",
                "description": "Whether the integration is active.",
                "description_kind": "markdown",
                "computed": true
              },
              "api_url": {
                "type": "string",
                "description": "The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "comment_on_event_enabled": {
                "type": "bool",
                "description": "Enable comments inside Jira issues on each GitLab event (commit / merge request)",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "commit_events": {
                "type": "bool",
                "description": "Enable notifications for commit events",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Create time.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "issues_events": {
                "type": "bool",
                "description": "Enable notifications for issues events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "jira_issue_transition_id": {
                "type": "string",
                "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2. *Note**: importing this field is only supported since GitLab 15.2.",
                "description_kind": "markdown",
                "optional": true
              },
              "job_events": {
                "type": "bool",
                "description": "Enable notifications for job events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "merge_requests_events": {
                "type": "bool",
                "description": "Enable notifications for merge request events",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "note_events": {
                "type": "bool",
                "description": "Enable notifications for note events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "password": {
                "type": "string",
                "description": "The password of the user created to be used with GitLab/JIRA.",
                "description_kind": "markdown",
                "required": true,
                "sensitive": true
              },
              "pipeline_events": {
                "type": "bool",
                "description": "Enable notifications for pipeline events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "ID of the project you want to activate integration on.",
                "description_kind": "markdown",
                "required": true
              },
              "project_key": {
                "type": "string",
                "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ.",
                "description_kind": "markdown",
                "optional": true
              },
              "push_events": {
                "type": "bool",
                "description": "Enable notifications for push events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "Enable notifications for tag_push events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "title": {
                "type": "string",
                "description": "Title.",
                "description_kind": "markdown",
                "computed": true
              },
              "updated_at": {
                "type": "string",
                "description": "Update time.",
                "description_kind": "markdown",
                "computed": true
              },
              "url": {
                "type": "string",
                "description": "The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.",
                "description_kind": "markdown",
                "required": true
              },
              "username": {
                "type": "string",
                "description": "The username of the user created to be used with GitLab/JIRA.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_service_jira` resource allows to manage the lifecycle of a project integration with Jira.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/services.html#jira)",
            "description_kind": "markdown"
          }
        },
        "gitlab_service_microsoft_teams": {
          "version": 0,
          "block": {
            "attributes": {
              "active": {
                "type": "bool",
                "description": "Whether the integration is active.",
                "description_kind": "markdown",
                "computed": true
              },
              "branches_to_be_notified": {
                "type": "string",
                "description": "Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default_and_protected”. The default value is “default”",
                "description_kind": "markdown",
                "optional": true
              },
              "confidential_issues_events": {
                "type": "bool",
                "description": "Enable notifications for confidential issue events",
                "description_kind": "markdown",
                "optional": true
              },
              "confidential_note_events": {
                "type": "bool",
                "description": "Enable notifications for confidential note events",
                "description_kind": "markdown",
                "optional": true
              },
              "created_at": {
                "type": "string",
                "description": "Create time.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "issues_events": {
                "type": "bool",
                "description": "Enable notifications for issue events",
                "description_kind": "markdown",
                "optional": true
              },
              "merge_requests_events": {
                "type": "bool",
                "description": "Enable notifications for merge request events",
                "description_kind": "markdown",
                "optional": true
              },
              "note_events": {
                "type": "bool",
                "description": "Enable notifications for note events",
                "description_kind": "markdown",
                "optional": true
              },
              "notify_only_broken_pipelines": {
                "type": "bool",
                "description": "Send notifications for broken pipelines",
                "description_kind": "markdown",
                "optional": true
              },
              "pipeline_events": {
                "type": "bool",
                "description": "Enable notifications for pipeline events",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "ID of the project you want to activate integration on.",
                "description_kind": "markdown",
                "required": true
              },
              "push_events": {
                "type": "bool",
                "description": "Enable notifications for push events",
                "description_kind": "markdown",
                "optional": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "Enable notifications for tag push events",
                "description_kind": "markdown",
                "optional": true
              },
              "updated_at": {
                "type": "string",
                "description": "Update time.",
                "description_kind": "markdown",
                "computed": true
              },
              "webhook": {
                "type": "string",
                "description": "The Microsoft Teams webhook. For example, https://outlook.office.com/webhook/...",
                "description_kind": "markdown",
                "required": true
              },
              "wiki_page_events": {
                "type": "bool",
                "description": "Enable notifications for wiki page events",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_service_microsoft_teams` resource allows to manage the lifecycle of a project integration with Microsoft Teams.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#microsoft-teams)",
            "description_kind": "markdown"
          }
        },
        "gitlab_service_pipelines_email": {
          "version": 0,
          "block": {
            "attributes": {
              "branches_to_be_notified": {
                "type": "string",
                "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. Default is `default`",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "notify_only_broken_pipelines": {
                "type": "bool",
                "description": "Notify only broken pipelines. Default is true.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "ID of the project you want to activate integration on.",
                "description_kind": "markdown",
                "required": true
              },
              "recipients": {
                "type": [
                  "set",
                  "string"
                ],
                "description": ") email addresses where notifications are sent.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_service_pipelines_email` resource allows to manage the lifecycle of a project integration with Pipeline Emails Service.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#pipeline-emails)",
            "description_kind": "markdown"
          }
        },
        "gitlab_service_slack": {
          "version": 0,
          "block": {
            "attributes": {
              "branches_to_be_notified": {
                "type": "string",
                "description": "Branches to send notifications for. Valid options are \"all\", \"default\", \"protected\", and \"default_and_protected\".",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "confidential_issue_channel": {
                "type": "string",
                "description": "The name of the channel to receive confidential issue events notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "confidential_issues_events": {
                "type": "bool",
                "description": "Enable notifications for confidential issues events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "confidential_note_events": {
                "type": "bool",
                "description": "Enable notifications for confidential note events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "issue_channel": {
                "type": "string",
                "description": "The name of the channel to receive issue events notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "issues_events": {
                "type": "bool",
                "description": "Enable notifications for issues events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "job_events": {
                "type": "bool",
                "description": "Enable notifications for job events. **ATTENTION**: This attribute is currently not being submitted to the GitLab API, due to https://github.com/xanzy/go-gitlab/issues/1354.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_request_channel": {
                "type": "string",
                "description": "The name of the channel to receive merge request events notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "merge_requests_events": {
                "type": "bool",
                "description": "Enable notifications for merge requests events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "note_channel": {
                "type": "string",
                "description": "The name of the channel to receive note events notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "note_events": {
                "type": "bool",
                "description": "Enable notifications for note events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "notify_only_broken_pipelines": {
                "type": "bool",
                "description": "Send notifications for broken pipelines.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "notify_only_default_branch": {
                "type": "bool",
                "description": "This parameter has been replaced with `branches_to_be_notified`.",
                "description_kind": "markdown",
                "deprecated": true,
                "optional": true,
                "computed": true
              },
              "pipeline_channel": {
                "type": "string",
                "description": "The name of the channel to receive pipeline events notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "pipeline_events": {
                "type": "bool",
                "description": "Enable notifications for pipeline events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "ID of the project you want to activate integration on.",
                "description_kind": "markdown",
                "required": true
              },
              "push_channel": {
                "type": "string",
                "description": "The name of the channel to receive push events notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "push_events": {
                "type": "bool",
                "description": "Enable notifications for push events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "tag_push_channel": {
                "type": "string",
                "description": "The name of the channel to receive tag push events notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "Enable notifications for tag push events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "username": {
                "type": "string",
                "description": "Username to use.",
                "description_kind": "markdown",
                "optional": true
              },
              "webhook": {
                "type": "string",
                "description": "Webhook URL (ex.: https://hooks.slack.com/services/...)",
                "description_kind": "markdown",
                "required": true
              },
              "wiki_page_channel": {
                "type": "string",
                "description": "The name of the channel to receive wiki page events notifications.",
                "description_kind": "markdown",
                "optional": true
              },
              "wiki_page_events": {
                "type": "bool",
                "description": "Enable notifications for wiki page events.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_service_slack` resource allows to manage the lifecycle of a project integration with Slack.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/integrations.html#slack-notifications)",
            "description_kind": "markdown"
          }
        },
        "gitlab_system_hook": {
          "version": 0,
          "block": {
            "attributes": {
              "created_at": {
                "type": "string",
                "description": "The date and time the hook was created in ISO8601 format.",
                "description_kind": "markdown",
                "computed": true
              },
              "enable_ssl_verification": {
                "type": "bool",
                "description": "Do SSL verification when triggering the hook.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "merge_requests_events": {
                "type": "bool",
                "description": "Trigger hook on merge requests events.",
                "description_kind": "markdown",
                "optional": true
              },
              "push_events": {
                "type": "bool",
                "description": "When true, the hook fires on push events.",
                "description_kind": "markdown",
                "optional": true
              },
              "repository_update_events": {
                "type": "bool",
                "description": "Trigger hook on repository update events.",
                "description_kind": "markdown",
                "optional": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "When true, the hook fires on new tags being pushed.",
                "description_kind": "markdown",
                "optional": true
              },
              "token": {
                "type": "string",
                "description": "Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for imported resources.",
                "description_kind": "markdown",
                "optional": true,
                "sensitive": true
              },
              "url": {
                "type": "string",
                "description": "The hook URL.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_system_hook` resource allows to manage the lifecycle of a system hook.\n\n-> This resource requires GitLab 14.9\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/system_hooks.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_tag_protection": {
          "version": 0,
          "block": {
            "attributes": {
              "create_access_level": {
                "type": "string",
                "description": "Access levels which are allowed to create. Valid values are: `no one`, `developer`, `maintainer`.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "tag": {
                "type": "string",
                "description": "Name of the tag or wildcard.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_tag_protection` resource allows to manage the lifecycle of a tag protection.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_tags.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_topic": {
          "version": 0,
          "block": {
            "attributes": {
              "avatar": {
                "type": "string",
                "description": "A local path to the avatar image to upload. **Note**: not available for imported resources.",
                "description_kind": "markdown",
                "optional": true
              },
              "avatar_hash": {
                "type": "string",
                "description": "The hash of the avatar image. Use `filesha256(\"path/to/avatar.png\")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "avatar_url": {
                "type": "string",
                "description": "The URL of the avatar image.",
                "description_kind": "markdown",
                "computed": true
              },
              "description": {
                "type": "string",
                "description": "A text describing the topic.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The topic's name.",
                "description_kind": "markdown",
                "required": true
              },
              "soft_destroy": {
                "type": "bool",
                "description": "Empty the topics fields instead of deleting it.",
                "description_kind": "markdown",
                "deprecated": true,
                "optional": true
              },
              "title": {
                "type": "string",
                "description": "The topic's description. Requires at least GitLab 15.0 for which it's a required argument.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_topic` resource allows to manage the lifecycle of topics that are then assignable to projects.\n\n-> Topics are the successors for project tags. Aside from avoiding terminology collisions with Git tags, they are more descriptive and better searchable.\n\n~> Deleting a topic was implemented in GitLab 14.9. For older versions of GitLab set `soft_destroy = true` to empty out a topic instead of deleting it.\n\n**Upstream API**: [GitLab REST API docs for topics](https://docs.gitlab.com/ee/api/topics.html)\n",
            "description_kind": "markdown"
          }
        },
        "gitlab_user": {
          "version": 0,
          "block": {
            "attributes": {
              "can_create_group": {
                "type": "bool",
                "description": "Boolean, defaults to false. Whether to allow the user to create groups.",
                "description_kind": "markdown",
                "optional": true
              },
              "email": {
                "type": "string",
                "description": "The e-mail address of the user.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "is_admin": {
                "type": "bool",
                "description": "Boolean, defaults to false.  Whether to enable administrative privileges",
                "description_kind": "markdown",
                "optional": true
              },
              "is_external": {
                "type": "bool",
                "description": "Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.",
                "description_kind": "markdown",
                "optional": true
              },
              "name": {
                "type": "string",
                "description": "The name of the user.",
                "description_kind": "markdown",
                "required": true
              },
              "namespace_id": {
                "type": "number",
                "description": "The ID of the user's namespace. Available since GitLab 14.10.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "note": {
                "type": "string",
                "description": "The note associated to the user.",
                "description_kind": "markdown",
                "optional": true
              },
              "password": {
                "type": "string",
                "description": "The password of the user.",
                "description_kind": "markdown",
                "optional": true,
                "sensitive": true
              },
              "projects_limit": {
                "type": "number",
                "description": "Integer, defaults to 0.  Number of projects user can create.",
                "description_kind": "markdown",
                "optional": true
              },
              "reset_password": {
                "type": "bool",
                "description": "Boolean, defaults to false. Send user password reset link.",
                "description_kind": "markdown",
                "optional": true
              },
              "skip_confirmation": {
                "type": "bool",
                "description": "Boolean, defaults to true. Whether to skip confirmation.",
                "description_kind": "markdown",
                "optional": true
              },
              "state": {
                "type": "string",
                "description": "String, defaults to 'active'. The state of the user account. Valid values are `active`, `deactivated`, `blocked`.",
                "description_kind": "markdown",
                "optional": true
              },
              "username": {
                "type": "string",
                "description": "The username of the user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_user` resource allows to manage the lifecycle of a user.\n\n-> the provider needs to be configured with admin-level access for this resource to work.\n\n-> You must specify either password or reset_password.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_user_custom_attribute": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "Key for the Custom Attribute.",
                "description_kind": "markdown",
                "required": true
              },
              "user": {
                "type": "number",
                "description": "The id of the user.",
                "description_kind": "markdown",
                "required": true
              },
              "value": {
                "type": "string",
                "description": "Value for the Custom Attribute.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_user_custom_attribute` resource allows to manage custom attributes for a user.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/custom_attributes.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_user_gpgkey": {
          "version": 0,
          "block": {
            "attributes": {
              "created_at": {
                "type": "string",
                "description": "The time when this key was created in GitLab.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The armored GPG public key.",
                "description_kind": "markdown",
                "required": true
              },
              "key_id": {
                "type": "number",
                "description": "The ID of the GPG key.",
                "description_kind": "markdown",
                "computed": true
              },
              "user_id": {
                "type": "number",
                "description": "The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the speicifed user, and an admin token is required.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_user_gpgkey` resource allows to manage the lifecycle of a GPG key assigned to the current user or a specific user.\n\t\t\n-> Managing GPG keys for arbitrary users requires admin privileges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#get-a-specific-gpg-key)",
            "description_kind": "markdown"
          }
        },
        "gitlab_user_sshkey": {
          "version": 0,
          "block": {
            "attributes": {
              "created_at": {
                "type": "string",
                "description": "The time when this key was created in GitLab.",
                "description_kind": "markdown",
                "computed": true
              },
              "expires_at": {
                "type": "string",
                "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The ssh key. The SSH key `comment` (trailing part) is optional and ignored for diffing, because GitLab overrides it with the username and GitLab hostname.",
                "description_kind": "markdown",
                "required": true
              },
              "key_id": {
                "type": "number",
                "description": "The ID of the ssh key.",
                "description_kind": "markdown",
                "computed": true
              },
              "title": {
                "type": "string",
                "description": "The title of the ssh key.",
                "description_kind": "markdown",
                "required": true
              },
              "user_id": {
                "type": "number",
                "description": "The ID or username of the user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_user_sshkey` resource allows to manage the lifecycle of an SSH key assigned to a user.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/users.html#single-ssh-key)",
            "description_kind": "markdown"
          }
        }
      },
      "data_source_schemas": {
        "gitlab_branch": {
          "version": 0,
          "block": {
            "attributes": {
              "can_push": {
                "type": "bool",
                "description": "Bool, true if you can push to the branch.",
                "description_kind": "markdown",
                "computed": true
              },
              "commit": {
                "type": [
                  "set",
                  [
                    "object",
                    {
                      "author_email": "string",
                      "author_name": "string",
                      "authored_date": "string",
                      "committed_date": "string",
                      "committer_email": "string",
                      "committer_name": "string",
                      "id": "string",
                      "message": "string",
                      "parent_ids": [
                        "set",
                        "string"
                      ],
                      "short_id": "string",
                      "title": "string"
                    }
                  ]
                ],
                "description": "The commit associated with the branch ref.",
                "description_kind": "markdown",
                "computed": true
              },
              "default": {
                "type": "bool",
                "description": "Bool, true if branch is the default branch for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "developer_can_merge": {
                "type": "bool",
                "description": "Bool, true if developer level access allows to merge branch.",
                "description_kind": "markdown",
                "computed": true
              },
              "developer_can_push": {
                "type": "bool",
                "description": "Bool, true if developer level access allows git push.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "merged": {
                "type": "bool",
                "description": "Bool, true if the branch has been merged into it's parent.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the branch.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The full path or id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "protected": {
                "type": "bool",
                "description": "Bool, true if branch has branch protection.",
                "description_kind": "markdown",
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "The url of the created branch (https.)",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_branch` data source allows details of a repository branch to be retrieved by its name and project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch)",
            "description_kind": "markdown"
          }
        },
        "gitlab_cluster_agent": {
          "version": 0,
          "block": {
            "attributes": {
              "agent_id": {
                "type": "number",
                "description": "The ID of the agent.",
                "description_kind": "markdown",
                "required": true
              },
              "created_at": {
                "type": "string",
                "description": "The ISO8601 datetime when the agent was created.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_by_user_id": {
                "type": "number",
                "description": "The ID of the user who created the agent.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The Name of the agent.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "ID or full path of the project maintained by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_cluster_agent` data source allows to retrieve details about a GitLab Agent for Kubernetes.\n\n-> Requires at least GitLab 14.10\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_cluster_agents": {
          "version": 0,
          "block": {
            "attributes": {
              "cluster_agents": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "agent_id": "number",
                      "created_at": "string",
                      "created_by_user_id": "number",
                      "name": "string",
                      "project": "string"
                    }
                  ]
                ],
                "description": "List of the registered agents.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The ID or full path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_cluster_agents` data source allows details of GitLab Agents for Kubernetes in a project.\n\n-> Requires at least GitLab 14.10\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/cluster_agents.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_current_user": {
          "version": 0,
          "block": {
            "attributes": {
              "bot": {
                "type": "bool",
                "description": "Indicates if the user is a bot.",
                "description_kind": "markdown",
                "computed": true
              },
              "global_id": {
                "type": "string",
                "description": "Global ID of the user. This is in the form of a GraphQL globally unique ID.",
                "description_kind": "markdown",
                "computed": true
              },
              "global_namespace_id": {
                "type": "string",
                "description": "Personal namespace of the user. This is in the form of a GraphQL globally unique ID.",
                "description_kind": "markdown",
                "computed": true
              },
              "group_count": {
                "type": "number",
                "description": "Group count for the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description": "ID of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "Human-readable name of the user. Returns **** if the user is a project bot and the requester does not have permission to view the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "namespace_id": {
                "type": "string",
                "description": "Personal namespace of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "public_email": {
                "type": "string",
                "description": "User’s public email.",
                "description_kind": "markdown",
                "computed": true
              },
              "username": {
                "type": "string",
                "description": "Username of the user. Unique within this instance of GitLab.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_current_user` data source allows details of the current user (determined by `token` provider attribute) to be retrieved.\n\n**Upstream API**: [GitLab GraphQL API docs](https://docs.gitlab.com/ee/api/graphql/reference/index.html#querycurrentuser)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group": {
          "version": 0,
          "block": {
            "attributes": {
              "default_branch_protection": {
                "type": "number",
                "description": "Whether developers and maintainers can push to the applicable default branch.",
                "description_kind": "markdown",
                "computed": true
              },
              "description": {
                "type": "string",
                "description": "The description of the group.",
                "description_kind": "markdown",
                "computed": true
              },
              "extra_shared_runners_minutes_limit": {
                "type": "number",
                "description": "Can be set by administrators only. Additional CI/CD minutes for this group.",
                "description_kind": "markdown",
                "computed": true
              },
              "full_name": {
                "type": "string",
                "description": "The full name of the group.",
                "description_kind": "markdown",
                "computed": true
              },
              "full_path": {
                "type": "string",
                "description": "The full path of the group.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "group_id": {
                "type": "number",
                "description": "The ID of the group.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "lfs_enabled": {
                "type": "bool",
                "description": "Boolean, is LFS enabled for projects in this group.",
                "description_kind": "markdown",
                "computed": true
              },
              "membership_lock": {
                "type": "bool",
                "description": "Users cannot be added to projects in this group.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of this group.",
                "description_kind": "markdown",
                "computed": true
              },
              "parent_id": {
                "type": "number",
                "description": "Integer, ID of the parent group.",
                "description_kind": "markdown",
                "computed": true
              },
              "path": {
                "type": "string",
                "description": "The path of the group.",
                "description_kind": "markdown",
                "computed": true
              },
              "prevent_forking_outside_group": {
                "type": "bool",
                "description": "When enabled, users can not fork projects from this group to external namespaces.",
                "description_kind": "markdown",
                "computed": true
              },
              "request_access_enabled": {
                "type": "bool",
                "description": "Boolean, is request for access enabled to the group.",
                "description_kind": "markdown",
                "computed": true
              },
              "runners_token": {
                "type": "string",
                "description": "The group level registration token to use during runner setup.",
                "description_kind": "markdown",
                "computed": true,
                "sensitive": true
              },
              "shared_runners_minutes_limit": {
                "type": "number",
                "description": "Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.",
                "description_kind": "markdown",
                "computed": true
              },
              "visibility_level": {
                "type": "string",
                "description": "Visibility level of the group. Possible values are `private`, `internal`, `public`.",
                "description_kind": "markdown",
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "Web URL of the group.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group` data source allows details of a group to be retrieved by its id or full path.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#details-of-a-group)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_hook": {
          "version": 0,
          "block": {
            "attributes": {
              "confidential_issues_events": {
                "type": "bool",
                "description": "Invoke the hook for confidential issues events.",
                "description_kind": "markdown",
                "computed": true
              },
              "confidential_note_events": {
                "type": "bool",
                "description": "Invoke the hook for confidential notes events.",
                "description_kind": "markdown",
                "computed": true
              },
              "deployment_events": {
                "type": "bool",
                "description": "Invoke the hook for deployment events.",
                "description_kind": "markdown",
                "computed": true
              },
              "enable_ssl_verification": {
                "type": "bool",
                "description": "Enable ssl verification when invoking the hook.",
                "description_kind": "markdown",
                "computed": true
              },
              "group": {
                "type": "string",
                "description": "The ID or full path of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "group_id": {
                "type": "number",
                "description": "The id of the group for the hook.",
                "description_kind": "markdown",
                "computed": true
              },
              "hook_id": {
                "type": "number",
                "description": "The id of the group hook.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "issues_events": {
                "type": "bool",
                "description": "Invoke the hook for issues events.",
                "description_kind": "markdown",
                "computed": true
              },
              "job_events": {
                "type": "bool",
                "description": "Invoke the hook for job events.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_requests_events": {
                "type": "bool",
                "description": "Invoke the hook for merge requests.",
                "description_kind": "markdown",
                "computed": true
              },
              "note_events": {
                "type": "bool",
                "description": "Invoke the hook for notes events.",
                "description_kind": "markdown",
                "computed": true
              },
              "pipeline_events": {
                "type": "bool",
                "description": "Invoke the hook for pipeline events.",
                "description_kind": "markdown",
                "computed": true
              },
              "push_events": {
                "type": "bool",
                "description": "Invoke the hook for push events.",
                "description_kind": "markdown",
                "computed": true
              },
              "push_events_branch_filter": {
                "type": "string",
                "description": "Invoke the hook for push events on matching branches only.",
                "description_kind": "markdown",
                "computed": true
              },
              "releases_events": {
                "type": "bool",
                "description": "Invoke the hook for releases events.",
                "description_kind": "markdown",
                "computed": true
              },
              "subgroup_events": {
                "type": "bool",
                "description": "Invoke the hook for subgroup events.",
                "description_kind": "markdown",
                "computed": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "Invoke the hook for tag push events.",
                "description_kind": "markdown",
                "computed": true
              },
              "token": {
                "type": "string",
                "description": "A token to present when invoking the hook. The token is not available for imported resources.",
                "description_kind": "markdown",
                "computed": true
              },
              "url": {
                "type": "string",
                "description": "The url of the hook to invoke.",
                "description_kind": "markdown",
                "computed": true
              },
              "wiki_page_events": {
                "type": "bool",
                "description": "Invoke the hook for wiki page events.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group_hook` data source allows to retrieve details about a hook in a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#get-group-hook)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_hooks": {
          "version": 0,
          "block": {
            "attributes": {
              "group": {
                "type": "string",
                "description": "The ID or full path of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "hooks": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "confidential_issues_events": "bool",
                      "confidential_note_events": "bool",
                      "deployment_events": "bool",
                      "enable_ssl_verification": "bool",
                      "group": "string",
                      "group_id": "number",
                      "hook_id": "number",
                      "issues_events": "bool",
                      "job_events": "bool",
                      "merge_requests_events": "bool",
                      "note_events": "bool",
                      "pipeline_events": "bool",
                      "push_events": "bool",
                      "push_events_branch_filter": "string",
                      "releases_events": "bool",
                      "subgroup_events": "bool",
                      "tag_push_events": "bool",
                      "token": "string",
                      "url": "string",
                      "wiki_page_events": "bool"
                    }
                  ]
                ],
                "description": "The list of hooks.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_group_hooks` data source allows to retrieve details about hooks in a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-group-hooks)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_membership": {
          "version": 0,
          "block": {
            "attributes": {
              "access_level": {
                "type": "string",
                "description": "Only return members with the desired access level. Acceptable values are: `guest`, `reporter`, `developer`, `maintainer`, `owner`.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "full_path": {
                "type": "string",
                "description": "The full path of the group.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "group_id": {
                "type": "number",
                "description": "The ID of the group.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "inherited": {
                "type": "bool",
                "description": "Return all project members including members through ancestor groups.",
                "description_kind": "markdown",
                "optional": true
              },
              "members": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "access_level": "string",
                      "avatar_url": "string",
                      "expires_at": "string",
                      "id": "number",
                      "name": "string",
                      "state": "string",
                      "username": "string",
                      "web_url": "string"
                    }
                  ]
                ],
                "description": "The list of group members.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group_membership` data source allows to list and filter all members of a group specified by either its id or full path.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_subgroups": {
          "version": 0,
          "block": {
            "attributes": {
              "all_available": {
                "type": "bool",
                "description": "Show all the groups you have access to.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "group_id": {
                "type": "number",
                "description": "The ID of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "min_access_level": {
                "type": "string",
                "description": "Limit to groups where current user has at least this access level.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "order_by": {
                "type": "string",
                "description": "Order groups by name, path or id.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "owned": {
                "type": "bool",
                "description": "Limit to groups explicitly owned by the current user.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "search": {
                "type": "string",
                "description": "Return the list of authorized groups matching the search criteria.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "skip_groups": {
                "type": [
                  "list",
                  "number"
                ],
                "description": "Skip the group IDs passed.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "sort": {
                "type": "string",
                "description": "Order groups in asc or desc order.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "statistics": {
                "type": "bool",
                "description": "Include group statistics (administrators only).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "subgroups": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "auto_devops_enabled": "bool",
                      "avatar_url": "string",
                      "created_at": "string",
                      "default_branch_protection": "number",
                      "description": "string",
                      "emails_disabled": "bool",
                      "file_template_project_id": "number",
                      "full_name": "string",
                      "full_path": "string",
                      "group_id": "number",
                      "ip_restriction_ranges": "string",
                      "lfs_enabled": "bool",
                      "mentions_disabled": "bool",
                      "name": "string",
                      "parent_id": "number",
                      "path": "string",
                      "project_creation_level": "string",
                      "request_access_enabled": "bool",
                      "require_two_factor_authentication": "bool",
                      "share_with_group_lock": "bool",
                      "statistics": [
                        "map",
                        "string"
                      ],
                      "subgroup_creation_level": "string",
                      "two_factor_grace_period": "number",
                      "visibility": "string",
                      "web_url": "string"
                    }
                  ]
                ],
                "description": "Subgroups of the parent group.",
                "description_kind": "markdown",
                "computed": true
              },
              "with_custom_attributes": {
                "type": "bool",
                "description": "Include custom attributes in response (administrators only).",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_group_subgroups` data source allows to get subgroups of a group.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-a-groups-subgroups)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_variable": {
          "version": 0,
          "block": {
            "attributes": {
              "environment_scope": {
                "type": "string",
                "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "group": {
                "type": "string",
                "description": "The name or id of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The name of the variable.",
                "description_kind": "markdown",
                "required": true
              },
              "masked": {
                "type": "bool",
                "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.",
                "description_kind": "markdown",
                "computed": true
              },
              "protected": {
                "type": "bool",
                "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.",
                "description_kind": "markdown",
                "computed": true
              },
              "value": {
                "type": "string",
                "description": "The value of the variable.",
                "description_kind": "markdown",
                "computed": true
              },
              "variable_type": {
                "type": "string",
                "description": "The type of a variable. Valid values are: `env_var`, `file`. Default is `env_var`.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group_variable` data source allows to retrieve details about a group-level CI/CD variable.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_group_variables": {
          "version": 0,
          "block": {
            "attributes": {
              "environment_scope": {
                "type": "string",
                "description": "The environment scope of the variable. Defaults to all environment (`*`).",
                "description_kind": "markdown",
                "optional": true
              },
              "group": {
                "type": "string",
                "description": "The name or id of the group.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "variables": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "environment_scope": "string",
                      "group": "string",
                      "key": "string",
                      "masked": "bool",
                      "protected": "bool",
                      "value": "string",
                      "variable_type": "string"
                    }
                  ]
                ],
                "description": "The list of variables returned by the search",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_group_variables` data source allows to retrieve all group-level CI/CD variables.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/group_level_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_groups": {
          "version": 0,
          "block": {
            "attributes": {
              "groups": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "default_branch_protection": "number",
                      "description": "string",
                      "full_name": "string",
                      "full_path": "string",
                      "group_id": "number",
                      "lfs_enabled": "bool",
                      "name": "string",
                      "parent_id": "number",
                      "path": "string",
                      "prevent_forking_outside_group": "bool",
                      "request_access_enabled": "bool",
                      "runners_token": "string",
                      "visibility_level": "string",
                      "web_url": "string"
                    }
                  ]
                ],
                "description": "The list of groups.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "order_by": {
                "type": "string",
                "description": "Order the groups' list by `id`, `name`, `path`, or `similarity`. (Requires administrator privileges)",
                "description_kind": "markdown",
                "optional": true
              },
              "search": {
                "type": "string",
                "description": "Search groups by name or path.",
                "description_kind": "markdown",
                "optional": true
              },
              "sort": {
                "type": "string",
                "description": "Sort groups' list in asc or desc order. (Requires administrator privileges)",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_groups` data source allows details of multiple groups to be retrieved given some optional filter criteria.\n\n-> Some attributes might not be returned depending on if you're an admin or not.\n\n-> Some available options require administrator privileges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/groups.html#list-groups)",
            "description_kind": "markdown"
          }
        },
        "gitlab_instance_deploy_keys": {
          "version": 0,
          "block": {
            "attributes": {
              "deploy_keys": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "created_at": "string",
                      "fingerprint": "string",
                      "id": "number",
                      "key": "string",
                      "projects_with_write_access": [
                        "list",
                        [
                          "object",
                          {
                            "created_at": "string",
                            "description": "string",
                            "id": "number",
                            "name": "string",
                            "name_with_namespace": "string",
                            "path": "string",
                            "path_with_namespace": "string"
                          }
                        ]
                      ],
                      "title": "string"
                    }
                  ]
                ],
                "description": "The list of all deploy keys across all projects of the GitLab instance.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "public": {
                "type": "bool",
                "description": "Only return deploy keys that are public.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_instance_deploy_keys` data source allows to retrieve a list of deploy keys for a GitLab instance.\n\n-> This data source requires administration privileges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys)",
            "description_kind": "markdown"
          }
        },
        "gitlab_instance_variable": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The name of the variable.",
                "description_kind": "markdown",
                "required": true
              },
              "masked": {
                "type": "bool",
                "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.",
                "description_kind": "markdown",
                "computed": true
              },
              "protected": {
                "type": "bool",
                "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.",
                "description_kind": "markdown",
                "computed": true
              },
              "value": {
                "type": "string",
                "description": "The value of the variable.",
                "description_kind": "markdown",
                "computed": true
              },
              "variable_type": {
                "type": "string",
                "description": "The type of a variable. Valid values are: `env_var`, `file`. Default is `env_var`.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_instance_variable` data source allows to retrieve details about an instance-level CI/CD variable.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_instance_variables": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "variables": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "key": "string",
                      "masked": "bool",
                      "protected": "bool",
                      "value": "string",
                      "variable_type": "string"
                    }
                  ]
                ],
                "description": "The list of variables returned by the search",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_instance_variables` data source allows to retrieve all instance-level CI/CD variables.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/instance_level_ci_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_metadata": {
          "version": 0,
          "block": {
            "attributes": {
              "enterprise": {
                "type": "bool",
                "description": "If the GitLab instance is an enterprise instance or not. Supported for GitLab 15.6 onwards.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description": "The id of the data source. It will always be `1`",
                "description_kind": "markdown",
                "computed": true
              },
              "kas": {
                "nested_type": {
                  "attributes": {
                    "enabled": {
                      "type": "bool",
                      "description": "Indicates whether KAS is enabled.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "external_url": {
                      "type": "string",
                      "description": "URL used by the agents to communicate with KAS. It’s null if kas.enabled is false.",
                      "description_kind": "markdown",
                      "computed": true
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of KAS. It’s null if kas.enabled is false.",
                      "description_kind": "markdown",
                      "computed": true
                    }
                  },
                  "nesting_mode": "single"
                },
                "description": "Metadata about the GitLab agent server for Kubernetes (KAS).",
                "description_kind": "markdown",
                "computed": true
              },
              "revision": {
                "type": "string",
                "description": "Revision of the GitLab instance.",
                "description_kind": "markdown",
                "computed": true
              },
              "version": {
                "type": "string",
                "description": "Version of the GitLab instance.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_metadata` data source retrieves the metadata of the GitLab instance.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/metadata.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project": {
          "version": 0,
          "block": {
            "attributes": {
              "analytics_access_level": {
                "type": "string",
                "description": "Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "archived": {
                "type": "bool",
                "description": "Whether the project is in read-only mode (archived).",
                "description_kind": "markdown",
                "computed": true
              },
              "auto_cancel_pending_pipelines": {
                "type": "string",
                "description": "Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.",
                "description_kind": "markdown",
                "computed": true
              },
              "auto_devops_deploy_strategy": {
                "type": "string",
                "description": "Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.",
                "description_kind": "markdown",
                "computed": true
              },
              "auto_devops_enabled": {
                "type": "bool",
                "description": "Enable Auto DevOps for this project.",
                "description_kind": "markdown",
                "computed": true
              },
              "autoclose_referenced_issues": {
                "type": "bool",
                "description": "Set whether auto-closing referenced issues on default branch.",
                "description_kind": "markdown",
                "computed": true
              },
              "build_git_strategy": {
                "type": "string",
                "description": "The Git strategy. Defaults to fetch.",
                "description_kind": "markdown",
                "computed": true
              },
              "build_timeout": {
                "type": "number",
                "description": "The maximum amount of time, in seconds, that a job can run.",
                "description_kind": "markdown",
                "computed": true
              },
              "builds_access_level": {
                "type": "string",
                "description": "Set the builds access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "ci_config_path": {
                "type": "string",
                "description": "CI config file path for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "ci_default_git_depth": {
                "type": "number",
                "description": "Default number of revisions for shallow cloning.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "ci_separated_caches": {
                "type": "bool",
                "description": "Use separate caches for protected branches.",
                "description_kind": "markdown",
                "computed": true
              },
              "container_expiration_policy": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "cadence": "string",
                      "enabled": "bool",
                      "keep_n": "number",
                      "name_regex_delete": "string",
                      "name_regex_keep": "string",
                      "next_run_at": "string",
                      "older_than": "string"
                    }
                  ]
                ],
                "description": "Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.",
                "description_kind": "markdown",
                "computed": true
              },
              "container_registry_access_level": {
                "type": "string",
                "description": "Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "default_branch": {
                "type": "string",
                "description": "The default branch for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "description": {
                "type": "string",
                "description": "A description of the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "emails_disabled": {
                "type": "bool",
                "description": "Disable email notifications.",
                "description_kind": "markdown",
                "computed": true
              },
              "external_authorization_classification_label": {
                "type": "string",
                "description": "The classification label for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "forking_access_level": {
                "type": "string",
                "description": "Set the forking access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "http_url_to_repo": {
                "type": "string",
                "description": "URL that can be provided to `git clone` to clone the",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description": "The integer or path with namespace that uniquely identifies the project within the gitlab install.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "import_url": {
                "type": "string",
                "description": "URL the project was imported from.",
                "description_kind": "markdown",
                "computed": true
              },
              "issues_access_level": {
                "type": "string",
                "description": "Set the issues access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "issues_enabled": {
                "type": "bool",
                "description": "Enable issue tracking for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "lfs_enabled": {
                "type": "bool",
                "description": "Enable LFS for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_commit_template": {
                "type": "string",
                "description": "Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_pipelines_enabled": {
                "type": "bool",
                "description": "Enable or disable merge pipelines.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_requests_access_level": {
                "type": "string",
                "description": "Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_requests_enabled": {
                "type": "bool",
                "description": "Enable merge requests for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_trains_enabled": {
                "type": "bool",
                "description": "Enable or disable merge trains.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "namespace_id": {
                "type": "number",
                "description": "The namespace (group or user) of the project. Defaults to your user.",
                "description_kind": "markdown",
                "computed": true
              },
              "operations_access_level": {
                "type": "string",
                "description": "Set the operations access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "path": {
                "type": "string",
                "description": "The path of the repository.",
                "description_kind": "markdown",
                "computed": true
              },
              "path_with_namespace": {
                "type": "string",
                "description": "The path of the repository with namespace.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "pipelines_enabled": {
                "type": "bool",
                "description": "Enable pipelines for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "printing_merge_request_link_enabled": {
                "type": "bool",
                "description": "Show link to create/view merge request when pushing from the command line",
                "description_kind": "markdown",
                "computed": true
              },
              "public_builds": {
                "type": "bool",
                "description": "If true, jobs can be viewed by non-project members.",
                "description_kind": "markdown",
                "optional": true
              },
              "push_rules": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "author_email_regex": "string",
                      "branch_name_regex": "string",
                      "commit_committer_check": "bool",
                      "commit_message_negative_regex": "string",
                      "commit_message_regex": "string",
                      "deny_delete_tag": "bool",
                      "file_name_regex": "string",
                      "max_file_size": "number",
                      "member_check": "bool",
                      "prevent_secrets": "bool",
                      "reject_unsigned_commits": "bool"
                    }
                  ]
                ],
                "description": "Push rules for the project. Push rules are only available on Enterprise plans and if the authenticated has permissions to read them.",
                "description_kind": "markdown",
                "computed": true
              },
              "remove_source_branch_after_merge": {
                "type": "bool",
                "description": "Enable `Delete source branch` option by default for all new merge requests",
                "description_kind": "markdown",
                "computed": true
              },
              "repository_access_level": {
                "type": "string",
                "description": "Set the repository access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "repository_storage": {
                "type": "string",
                "description": "Which storage shard the repository is on. (administrator only)",
                "description_kind": "markdown",
                "computed": true
              },
              "request_access_enabled": {
                "type": "bool",
                "description": "Allow users to request member access.",
                "description_kind": "markdown",
                "computed": true
              },
              "requirements_access_level": {
                "type": "string",
                "description": "Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "resolve_outdated_diff_discussions": {
                "type": "bool",
                "description": "Automatically resolve merge request diffs discussions on lines changed with a push.",
                "description_kind": "markdown",
                "computed": true
              },
              "restrict_user_defined_variables": {
                "type": "bool",
                "description": "Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.",
                "description_kind": "markdown",
                "computed": true
              },
              "runners_token": {
                "type": "string",
                "description": "Registration token to use during runner setup.",
                "description_kind": "markdown",
                "computed": true
              },
              "security_and_compliance_access_level": {
                "type": "string",
                "description": "Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "snippets_access_level": {
                "type": "string",
                "description": "Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "snippets_enabled": {
                "type": "bool",
                "description": "Enable snippets for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "squash_commit_template": {
                "type": "string",
                "description": "Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)",
                "description_kind": "markdown",
                "computed": true
              },
              "ssh_url_to_repo": {
                "type": "string",
                "description": "URL that can be provided to `git clone` to clone the",
                "description_kind": "markdown",
                "computed": true
              },
              "suggestion_commit_message": {
                "type": "string",
                "description": "The commit message used to apply merge request suggestions.",
                "description_kind": "markdown",
                "computed": true
              },
              "topics": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "The list of topics for the project.",
                "description_kind": "markdown",
                "computed": true
              },
              "visibility_level": {
                "type": "string",
                "description": "Repositories are created as private by default.",
                "description_kind": "markdown",
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "URL that can be used to find the project in a browser.",
                "description_kind": "markdown",
                "computed": true
              },
              "wiki_access_level": {
                "type": "string",
                "description": "Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.",
                "description_kind": "markdown",
                "computed": true
              },
              "wiki_enabled": {
                "type": "bool",
                "description": "Enable wiki for the project.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project` data source allows details of a project to be retrieved by either its ID or its path with namespace.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-single-project)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_branches": {
          "version": 0,
          "block": {
            "attributes": {
              "branches": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "can_push": "bool",
                      "commit": [
                        "set",
                        [
                          "object",
                          {
                            "author_email": "string",
                            "author_name": "string",
                            "authored_date": "string",
                            "committed_date": "string",
                            "committer_email": "string",
                            "committer_name": "string",
                            "id": "string",
                            "message": "string",
                            "parent_ids": [
                              "set",
                              "string"
                            ],
                            "short_id": "string",
                            "title": "string"
                          }
                        ]
                      ],
                      "default": "bool",
                      "developers_can_merge": "bool",
                      "developers_can_push": "bool",
                      "merged": "bool",
                      "name": "string",
                      "protected": "bool",
                      "web_url": "string"
                    }
                  ]
                ],
                "description": "The list of branches of the project, as defined below.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "ID or URL-encoded path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_project_branches` data source allows details of the branches of a given project to be retrieved.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/branches.html#list-repository-branches)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_hook": {
          "version": 0,
          "block": {
            "attributes": {
              "confidential_issues_events": {
                "type": "bool",
                "description": "Invoke the hook for confidential issues events.",
                "description_kind": "markdown",
                "computed": true
              },
              "confidential_note_events": {
                "type": "bool",
                "description": "Invoke the hook for confidential notes events.",
                "description_kind": "markdown",
                "computed": true
              },
              "deployment_events": {
                "type": "bool",
                "description": "Invoke the hook for deployment events.",
                "description_kind": "markdown",
                "computed": true
              },
              "enable_ssl_verification": {
                "type": "bool",
                "description": "Enable ssl verification when invoking the hook.",
                "description_kind": "markdown",
                "computed": true
              },
              "hook_id": {
                "type": "number",
                "description": "The id of the project hook.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "issues_events": {
                "type": "bool",
                "description": "Invoke the hook for issues events.",
                "description_kind": "markdown",
                "computed": true
              },
              "job_events": {
                "type": "bool",
                "description": "Invoke the hook for job events.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_requests_events": {
                "type": "bool",
                "description": "Invoke the hook for merge requests.",
                "description_kind": "markdown",
                "computed": true
              },
              "note_events": {
                "type": "bool",
                "description": "Invoke the hook for notes events.",
                "description_kind": "markdown",
                "computed": true
              },
              "pipeline_events": {
                "type": "bool",
                "description": "Invoke the hook for pipeline events.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project to add the hook to.",
                "description_kind": "markdown",
                "required": true
              },
              "project_id": {
                "type": "number",
                "description": "The id of the project for the hook.",
                "description_kind": "markdown",
                "computed": true
              },
              "push_events": {
                "type": "bool",
                "description": "Invoke the hook for push events.",
                "description_kind": "markdown",
                "computed": true
              },
              "push_events_branch_filter": {
                "type": "string",
                "description": "Invoke the hook for push events on matching branches only.",
                "description_kind": "markdown",
                "computed": true
              },
              "releases_events": {
                "type": "bool",
                "description": "Invoke the hook for releases events.",
                "description_kind": "markdown",
                "computed": true
              },
              "tag_push_events": {
                "type": "bool",
                "description": "Invoke the hook for tag push events.",
                "description_kind": "markdown",
                "computed": true
              },
              "token": {
                "type": "string",
                "description": "A token to present when invoking the hook. The token is not available for imported resources.",
                "description_kind": "markdown",
                "computed": true
              },
              "url": {
                "type": "string",
                "description": "The url of the hook to invoke.",
                "description_kind": "markdown",
                "computed": true
              },
              "wiki_page_events": {
                "type": "bool",
                "description": "Invoke the hook for wiki page events.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_hook` data source allows to retrieve details about a hook in a project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#get-project-hook)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_hooks": {
          "version": 0,
          "block": {
            "attributes": {
              "hooks": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "confidential_issues_events": "bool",
                      "confidential_note_events": "bool",
                      "deployment_events": "bool",
                      "enable_ssl_verification": "bool",
                      "hook_id": "number",
                      "issues_events": "bool",
                      "job_events": "bool",
                      "merge_requests_events": "bool",
                      "note_events": "bool",
                      "pipeline_events": "bool",
                      "project": "string",
                      "project_id": "number",
                      "push_events": "bool",
                      "push_events_branch_filter": "string",
                      "releases_events": "bool",
                      "tag_push_events": "bool",
                      "token": "string",
                      "url": "string",
                      "wiki_page_events": "bool"
                    }
                  ]
                ],
                "description": "The list of hooks.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_project_hooks` data source allows to retrieve details about hooks in a project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-project-hooks)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_issue": {
          "version": 0,
          "block": {
            "attributes": {
              "assignee_ids": {
                "type": [
                  "set",
                  "number"
                ],
                "description": "The IDs of the users to assign the issue to.",
                "description_kind": "markdown",
                "computed": true
              },
              "author_id": {
                "type": "number",
                "description": "The ID of the author of the issue. Use `gitlab_user` data source to get more information about the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "closed_at": {
                "type": "string",
                "description": "When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.",
                "description_kind": "markdown",
                "computed": true
              },
              "closed_by_user_id": {
                "type": "number",
                "description": "The ID of the user that closed the issue. Use `gitlab_user` data source to get more information about the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "confidential": {
                "type": "bool",
                "description": "Set an issue to be confidential.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.",
                "description_kind": "markdown",
                "computed": true
              },
              "description": {
                "type": "string",
                "description": "The description of an issue. Limited to 1,048,576 characters.",
                "description_kind": "markdown",
                "computed": true
              },
              "discussion_locked": {
                "type": "bool",
                "description": "Whether the issue is locked for discussions or not.",
                "description_kind": "markdown",
                "computed": true
              },
              "discussion_to_resolve": {
                "type": "string",
                "description": "The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of.",
                "description_kind": "markdown",
                "computed": true
              },
              "downvotes": {
                "type": "number",
                "description": "The number of downvotes the issue has received.",
                "description_kind": "markdown",
                "computed": true
              },
              "due_date": {
                "type": "string",
                "description": "The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.\n**Note:** removing a due date is currently not supported, see https://github.com/xanzy/go-gitlab/issues/1384 for details.\n\t\t\t\t",
                "description_kind": "markdown",
                "computed": true
              },
              "epic_id": {
                "type": "number",
                "description": "ID of the epic to add the issue to. Valid values are greater than or equal to 0.",
                "description_kind": "markdown",
                "computed": true
              },
              "epic_issue_id": {
                "type": "number",
                "description": "The ID of the epic issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "external_id": {
                "type": "string",
                "description": "The external ID of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "human_time_estimate": {
                "type": "string",
                "description": "The human-readable time estimate of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "human_total_time_spent": {
                "type": "string",
                "description": "The human-readable total time spent of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "iid": {
                "type": "number",
                "description": "The internal ID of the project's issue.",
                "description_kind": "markdown",
                "required": true
              },
              "issue_id": {
                "type": "number",
                "description": "The instance-wide ID of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "issue_link_id": {
                "type": "number",
                "description": "The ID of the issue link.",
                "description_kind": "markdown",
                "computed": true
              },
              "issue_type": {
                "type": "string",
                "description": "The type of issue. Valid values are: `issue`, `incident`, `test_case`.",
                "description_kind": "markdown",
                "computed": true
              },
              "labels": {
                "type": [
                  "set",
                  "string"
                ],
                "description": "The labels of an issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "links": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "The links of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_request_to_resolve_discussions_of": {
                "type": "number",
                "description": "The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_requests_count": {
                "type": "number",
                "description": "The number of merge requests associated with the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "milestone_id": {
                "type": "number",
                "description": "The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue's details.",
                "description_kind": "markdown",
                "computed": true
              },
              "moved_to_id": {
                "type": "number",
                "description": "The ID of the issue that was moved to.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or ID of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "references": {
                "type": [
                  "map",
                  "string"
                ],
                "description": "The references of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "state": {
                "type": "string",
                "description": "The state of the issue. Valid values are: `opened`, `closed`.",
                "description_kind": "markdown",
                "computed": true
              },
              "subscribed": {
                "type": "bool",
                "description": "Whether the authenticated user is subscribed to the issue or not.",
                "description_kind": "markdown",
                "computed": true
              },
              "task_completion_status": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "completed_count": "number",
                      "count": "number"
                    }
                  ]
                ],
                "description": "The task completion status. It's always a one element list.",
                "description_kind": "markdown",
                "computed": true
              },
              "time_estimate": {
                "type": "number",
                "description": "The time estimate of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "title": {
                "type": "string",
                "description": "The title of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "total_time_spent": {
                "type": "number",
                "description": "The total time spent of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "updated_at": {
                "type": "string",
                "description": "When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.",
                "description_kind": "markdown",
                "computed": true
              },
              "upvotes": {
                "type": "number",
                "description": "The number of upvotes the issue has received.",
                "description_kind": "markdown",
                "computed": true
              },
              "user_notes_count": {
                "type": "number",
                "description": "The number of user notes on the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "The web URL of the issue.",
                "description_kind": "markdown",
                "computed": true
              },
              "weight": {
                "type": "number",
                "description": "The weight of the issue. Valid values are greater than or equal to 0.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_issue` data source allows to retrieve details about an issue in a project.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_issues": {
          "version": 0,
          "block": {
            "attributes": {
              "assignee_id": {
                "type": "number",
                "description": "Return issues assigned to the given user id. Mutually exclusive with assignee_username. None returns unassigned issues. Any returns issues with an assignee.",
                "description_kind": "markdown",
                "optional": true
              },
              "assignee_username": {
                "type": "string",
                "description": "Return issues assigned to the given username. Similar to assignee_id and mutually exclusive with assignee_id. In GitLab CE, the assignee_username array should only contain a single value. Otherwise, an invalid parameter error is returned.",
                "description_kind": "markdown",
                "optional": true
              },
              "author_id": {
                "type": "number",
                "description": "Return issues created by the given user id. Combine with scope=all or scope=assigned_to_me.",
                "description_kind": "markdown",
                "optional": true
              },
              "confidential": {
                "type": "bool",
                "description": "Filter confidential or public issues.",
                "description_kind": "markdown",
                "optional": true
              },
              "created_after": {
                "type": "string",
                "description": "Return issues created on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)",
                "description_kind": "markdown",
                "optional": true
              },
              "created_before": {
                "type": "string",
                "description": "Return issues created on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)",
                "description_kind": "markdown",
                "optional": true
              },
              "due_date": {
                "type": "string",
                "description": "Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts: 0 (no due date), any, today, tomorrow, overdue, week, month, next_month_and_previous_two_weeks.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "iids": {
                "type": [
                  "list",
                  "number"
                ],
                "description": "Return only the issues having the given iid",
                "description_kind": "markdown",
                "optional": true
              },
              "issue_type": {
                "type": "string",
                "description": "Filter to a given type of issue. Valid values are [issue incident test_case]. (Introduced in GitLab 13.12)",
                "description_kind": "markdown",
                "optional": true
              },
              "issues": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "assignee_ids": [
                        "set",
                        "number"
                      ],
                      "author_id": "number",
                      "closed_at": "string",
                      "closed_by_user_id": "number",
                      "confidential": "bool",
                      "created_at": "string",
                      "description": "string",
                      "discussion_locked": "bool",
                      "discussion_to_resolve": "string",
                      "downvotes": "number",
                      "due_date": "string",
                      "epic_id": "number",
                      "epic_issue_id": "number",
                      "external_id": "string",
                      "human_time_estimate": "string",
                      "human_total_time_spent": "string",
                      "iid": "number",
                      "issue_id": "number",
                      "issue_link_id": "number",
                      "issue_type": "string",
                      "labels": [
                        "set",
                        "string"
                      ],
                      "links": [
                        "map",
                        "string"
                      ],
                      "merge_request_to_resolve_discussions_of": "number",
                      "merge_requests_count": "number",
                      "milestone_id": "number",
                      "moved_to_id": "number",
                      "project": "string",
                      "references": [
                        "map",
                        "string"
                      ],
                      "state": "string",
                      "subscribed": "bool",
                      "task_completion_status": [
                        "list",
                        [
                          "object",
                          {
                            "completed_count": "number",
                            "count": "number"
                          }
                        ]
                      ],
                      "time_estimate": "number",
                      "title": "string",
                      "total_time_spent": "number",
                      "updated_at": "string",
                      "upvotes": "number",
                      "user_notes_count": "number",
                      "web_url": "string",
                      "weight": "number"
                    }
                  ]
                ],
                "description": "The list of issues returned by the search.",
                "description_kind": "markdown",
                "computed": true
              },
              "labels": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Return issues with labels. Issues must have all labels to be returned. None lists all issues with no labels. Any lists all issues with at least one label. No+Label (Deprecated) lists all issues with no labels. Predefined names are case-insensitive.",
                "description_kind": "markdown",
                "optional": true
              },
              "milestone": {
                "type": "string",
                "description": "The milestone title. None lists all issues with no milestone. Any lists all issues that have an assigned milestone.",
                "description_kind": "markdown",
                "optional": true
              },
              "my_reaction_emoji": {
                "type": "string",
                "description": "Return issues reacted by the authenticated user by the given emoji. None returns issues not given a reaction. Any returns issues given at least one reaction.",
                "description_kind": "markdown",
                "optional": true
              },
              "not_assignee_id": {
                "type": [
                  "list",
                  "number"
                ],
                "description": "Return issues that do not match the assignee id.",
                "description_kind": "markdown",
                "optional": true
              },
              "not_author_id": {
                "type": [
                  "list",
                  "number"
                ],
                "description": "Return issues that do not match the author id.",
                "description_kind": "markdown",
                "optional": true
              },
              "not_labels": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Return issues that do not match the labels.",
                "description_kind": "markdown",
                "optional": true
              },
              "not_milestone": {
                "type": "string",
                "description": "Return issues that do not match the milestone.",
                "description_kind": "markdown",
                "optional": true
              },
              "not_my_reaction_emoji": {
                "type": [
                  "list",
                  "string"
                ],
                "description": "Return issues not reacted by the authenticated user by the given emoji.",
                "description_kind": "markdown",
                "optional": true
              },
              "order_by": {
                "type": "string",
                "description": "Return issues ordered by. Valid values are `created_at`, `updated_at`, `priority`, `due_date`, `relative_position`, `label_priority`, `milestone_due`, `popularity`, `weight`. Default is created_at",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "scope": {
                "type": "string",
                "description": "Return issues for the given scope. Valid values are `created_by_me`, `assigned_to_me`, `all`. Defaults to all.",
                "description_kind": "markdown",
                "optional": true
              },
              "search": {
                "type": "string",
                "description": "Search project issues against their title and description",
                "description_kind": "markdown",
                "optional": true
              },
              "sort": {
                "type": "string",
                "description": "Return issues sorted in asc or desc order. Default is desc",
                "description_kind": "markdown",
                "optional": true
              },
              "updated_after": {
                "type": "string",
                "description": "Return issues updated on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)",
                "description_kind": "markdown",
                "optional": true
              },
              "updated_before": {
                "type": "string",
                "description": "Return issues updated on or before the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z)",
                "description_kind": "markdown",
                "optional": true
              },
              "weight": {
                "type": "number",
                "description": "Return issues with the specified weight. None returns issues with no weight assigned. Any returns issues with a weight assigned.",
                "description_kind": "markdown",
                "optional": true
              },
              "with_labels_details": {
                "type": "bool",
                "description": "If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html, :text_color. Default is false. description_html was introduced in GitLab 12.7",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_project_issues` data source allows to retrieve details about issues in a project.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/issues.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_membership": {
          "version": 0,
          "block": {
            "attributes": {
              "full_path": {
                "type": "string",
                "description": "The full path of the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "inherited": {
                "type": "bool",
                "description": "Return all project members including members through ancestor groups",
                "description_kind": "markdown",
                "optional": true
              },
              "members": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "access_level": "string",
                      "avatar_url": "string",
                      "expires_at": "string",
                      "id": "number",
                      "name": "string",
                      "state": "string",
                      "username": "string",
                      "web_url": "string"
                    }
                  ]
                ],
                "description": "The list of project members.",
                "description_kind": "markdown",
                "computed": true
              },
              "project_id": {
                "type": "number",
                "description": "The ID of the project.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "query": {
                "type": "string",
                "description": "A query string to search for members",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_project_membership` data source allows to list and filter all members of a project specified by either its id or full path.\n\n-> **Note** exactly one of project_id or full_path must be provided.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_milestone": {
          "version": 0,
          "block": {
            "attributes": {
              "created_at": {
                "type": "string",
                "description": "The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.",
                "description_kind": "markdown",
                "computed": true
              },
              "description": {
                "type": "string",
                "description": "The description of the milestone.",
                "description_kind": "markdown",
                "computed": true
              },
              "due_date": {
                "type": "string",
                "description": "The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.",
                "description_kind": "markdown",
                "computed": true
              },
              "expired": {
                "type": "bool",
                "description": "Bool, true if milestore expired.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "iid": {
                "type": "number",
                "description": "The ID of the project's milestone.",
                "description_kind": "markdown",
                "computed": true
              },
              "milestone_id": {
                "type": "number",
                "description": "The instance-wide ID of the project’s milestone.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "project_id": {
                "type": "number",
                "description": "The project ID of milestone.",
                "description_kind": "markdown",
                "computed": true
              },
              "start_date": {
                "type": "string",
                "description": "The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.",
                "description_kind": "markdown",
                "computed": true
              },
              "state": {
                "type": "string",
                "description": "The state of the milestone. Valid values are: `active`, `closed`.",
                "description_kind": "markdown",
                "computed": true
              },
              "title": {
                "type": "string",
                "description": "The title of a milestone.",
                "description_kind": "markdown",
                "computed": true
              },
              "updated_at": {
                "type": "string",
                "description": "The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.",
                "description_kind": "markdown",
                "computed": true
              },
              "web_url": {
                "type": "string",
                "description": "The web URL of the milestone.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_milestone` data source allows get details of a project milestone.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_milestones": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "iids": {
                "type": [
                  "list",
                  "number"
                ],
                "description": "Return only the milestones having the given `iid` (Note: ignored if `include_parent_milestones` is set as `true`).",
                "description_kind": "markdown",
                "optional": true
              },
              "include_parent_milestones": {
                "type": "bool",
                "description": "Include group milestones from parent group and its ancestors. Introduced in GitLab 13.4.",
                "description_kind": "markdown",
                "optional": true
              },
              "milestones": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "created_at": "string",
                      "description": "string",
                      "due_date": "string",
                      "expired": "bool",
                      "iid": "number",
                      "milestone_id": "number",
                      "project": "string",
                      "project_id": "number",
                      "start_date": "string",
                      "state": "string",
                      "title": "string",
                      "updated_at": "string",
                      "web_url": "string"
                    }
                  ]
                ],
                "description": "List of milestones from a project.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "search": {
                "type": "string",
                "description": "Return only milestones with a title or description matching the provided string.",
                "description_kind": "markdown",
                "optional": true
              },
              "state": {
                "type": "string",
                "description": "Return only `active` or `closed` milestones.",
                "description_kind": "markdown",
                "optional": true
              },
              "title": {
                "type": "string",
                "description": "Return only the milestones having the given `title`.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_project_milestones` data source allows get details of a project milestones.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/milestones.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_protected_branch": {
          "version": 0,
          "block": {
            "attributes": {
              "allow_force_push": {
                "type": "bool",
                "description": "Whether force push is allowed.",
                "description_kind": "markdown",
                "computed": true
              },
              "code_owner_approval_required": {
                "type": "bool",
                "description": "Reject code pushes that change files listed in the CODEOWNERS file.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "number",
                "description": "The ID of this resource.",
                "description_kind": "markdown",
                "computed": true
              },
              "merge_access_levels": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "access_level": "string",
                      "access_level_description": "string",
                      "group_id": "number",
                      "user_id": "number"
                    }
                  ]
                ],
                "description": "Describes which access levels, users, or groups are allowed to perform the action.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the protected branch.",
                "description_kind": "markdown",
                "required": true
              },
              "project_id": {
                "type": "string",
                "description": "The integer or path with namespace that uniquely identifies the project.",
                "description_kind": "markdown",
                "required": true
              },
              "push_access_levels": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "access_level": "string",
                      "access_level_description": "string",
                      "group_id": "number",
                      "user_id": "number"
                    }
                  ]
                ],
                "description": "Describes which access levels, users, or groups are allowed to perform the action.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_protected_branch` data source allows details of a protected branch to be retrieved by its name and the project it belongs to.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_protected_branches": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project_id": {
                "type": "string",
                "description": "The integer or path with namespace that uniquely identifies the project.",
                "description_kind": "markdown",
                "required": true
              },
              "protected_branches": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "allow_force_push": "bool",
                      "code_owner_approval_required": "bool",
                      "id": "number",
                      "merge_access_levels": [
                        "list",
                        [
                          "object",
                          {
                            "access_level": "string",
                            "access_level_description": "string",
                            "group_id": "number",
                            "user_id": "number"
                          }
                        ]
                      ],
                      "name": "string",
                      "push_access_levels": [
                        "list",
                        [
                          "object",
                          {
                            "access_level": "string",
                            "access_level_description": "string",
                            "group_id": "number",
                            "user_id": "number"
                          }
                        ]
                      ]
                    }
                  ]
                ],
                "description": "A list of protected branches, as defined below.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_protected_branches` data source allows details of the protected branches of a given project.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/protected_branches.html#list-protected-branches)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_tag": {
          "version": 0,
          "block": {
            "attributes": {
              "commit": {
                "type": [
                  "set",
                  [
                    "object",
                    {
                      "author_email": "string",
                      "author_name": "string",
                      "authored_date": "string",
                      "committed_date": "string",
                      "committer_email": "string",
                      "committer_name": "string",
                      "id": "string",
                      "message": "string",
                      "parent_ids": [
                        "set",
                        "string"
                      ],
                      "short_id": "string",
                      "title": "string"
                    }
                  ]
                ],
                "description": "The commit associated with the tag.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "message": {
                "type": "string",
                "description": "The message of the annotated tag.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of a tag.",
                "description_kind": "markdown",
                "required": true
              },
              "project": {
                "type": "string",
                "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "protected": {
                "type": "bool",
                "description": "Bool, true if tag has tag protection.",
                "description_kind": "markdown",
                "computed": true
              },
              "release": {
                "type": [
                  "set",
                  [
                    "object",
                    {
                      "description": "string",
                      "tag_name": "string"
                    }
                  ]
                ],
                "description": "The release associated with the tag.",
                "description_kind": "markdown",
                "computed": true
              },
              "target": {
                "type": "string",
                "description": "The unique id assigned to the commit by Gitlab.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_tag` data source allows details of a project tag to be retrieved by its name.\n\n**Upstream API**: [GitLab API docs](https://docs.gitlab.com/ee/api/tags.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_tags": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "order_by": {
                "type": "string",
                "description": "Return tags ordered by `name` or `updated` fields. Default is `updated`.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "search": {
                "type": "string",
                "description": "Return list of tags matching the search criteria. You can use `^term` and `term$` to find tags that begin and end with `term` respectively. No other regular expressions are supported.",
                "description_kind": "markdown",
                "optional": true
              },
              "sort": {
                "type": "string",
                "description": "Return tags sorted in `asc` or `desc` order. Default is `desc`.",
                "description_kind": "markdown",
                "optional": true
              },
              "tags": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "commit": [
                        "set",
                        [
                          "object",
                          {
                            "author_email": "string",
                            "author_name": "string",
                            "authored_date": "string",
                            "committed_date": "string",
                            "committer_email": "string",
                            "committer_name": "string",
                            "id": "string",
                            "message": "string",
                            "parent_ids": [
                              "set",
                              "string"
                            ],
                            "short_id": "string",
                            "title": "string"
                          }
                        ]
                      ],
                      "message": "string",
                      "name": "string",
                      "protected": "bool",
                      "release": [
                        "set",
                        [
                          "object",
                          {
                            "description": "string",
                            "tag_name": "string"
                          }
                        ]
                      ],
                      "target": "string"
                    }
                  ]
                ],
                "description": "List of repository tags from a project.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_tags` data source allows details of project tags to be retrieved by some search criteria.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/tags.html#list-project-repository-tags)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_variable": {
          "version": 0,
          "block": {
            "attributes": {
              "environment_scope": {
                "type": "string",
                "description": "The environment scope of the variable. Defaults to all environment (`*`). Note that in Community Editions of Gitlab, values other than `*` will cause inconsistent plans.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "key": {
                "type": "string",
                "description": "The name of the variable.",
                "description_kind": "markdown",
                "required": true
              },
              "masked": {
                "type": "bool",
                "description": "If set to `true`, the value of the variable will be hidden in job logs. The value must meet the [masking requirements](https://docs.gitlab.com/ee/ci/variables/#masked-variables). Defaults to `false`.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "protected": {
                "type": "bool",
                "description": "If set to `true`, the variable will be passed only to pipelines running on protected branches and tags. Defaults to `false`.",
                "description_kind": "markdown",
                "computed": true
              },
              "value": {
                "type": "string",
                "description": "The value of the variable.",
                "description_kind": "markdown",
                "computed": true
              },
              "variable_type": {
                "type": "string",
                "description": "The type of a variable. Valid values are: `env_var`, `file`. Default is `env_var`.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_variable` data source allows to retrieve details about a project-level CI/CD variable.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_project_variables": {
          "version": 0,
          "block": {
            "attributes": {
              "environment_scope": {
                "type": "string",
                "description": "The environment scope of the variable. Defaults to all environment (`*`).",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or id of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "variables": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "environment_scope": "string",
                      "key": "string",
                      "masked": "bool",
                      "project": "string",
                      "protected": "bool",
                      "value": "string",
                      "variable_type": "string"
                    }
                  ]
                ],
                "description": "The list of variables returned by the search",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_project_variables` data source allows to retrieve all project-level CI/CD variables.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/project_level_variables.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_projects": {
          "version": 0,
          "block": {
            "attributes": {
              "archived": {
                "type": "bool",
                "description": "Limit by archived status.",
                "description_kind": "markdown",
                "optional": true
              },
              "group_id": {
                "type": "number",
                "description": "The ID of the group owned by the authenticated user to look projects for within. Cannot be used with `min_access_level`, `with_programming_language` or `statistics`.",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "include_subgroups": {
                "type": "bool",
                "description": "Include projects in subgroups of this group. Default is `false`. Needs `group_id`.",
                "description_kind": "markdown",
                "optional": true
              },
              "max_queryable_pages": {
                "type": "number",
                "description": "The maximum number of project results pages that may be queried. Prevents overloading your Gitlab instance in case of a misconfiguration.",
                "description_kind": "markdown",
                "optional": true
              },
              "membership": {
                "type": "bool",
                "description": "Limit by projects that the current user is a member of.",
                "description_kind": "markdown",
                "optional": true
              },
              "min_access_level": {
                "type": "number",
                "description": "Limit to projects where current user has at least this access level, refer to the [official documentation](https://docs.gitlab.com/ee/api/members.html) for values. Cannot be used with `group_id`.",
                "description_kind": "markdown",
                "optional": true
              },
              "order_by": {
                "type": "string",
                "description": "Return projects ordered ordered by: `id`, `name`, `path`, `created_at`, `updated_at`, `last_activity_at`, `similarity`, `repository_size`, `storage_size`, `packages_size`, `wiki_size`. Some values or only available in certain circumstances. See [upstream docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects) for details.",
                "description_kind": "markdown",
                "optional": true
              },
              "owned": {
                "type": "bool",
                "description": "Limit by projects owned by the current user.",
                "description_kind": "markdown",
                "optional": true
              },
              "page": {
                "type": "number",
                "description": "The first page to begin the query on.",
                "description_kind": "markdown",
                "optional": true
              },
              "per_page": {
                "type": "number",
                "description": "The number of results to return per page.",
                "description_kind": "markdown",
                "optional": true
              },
              "projects": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "_links": [
                        "map",
                        "string"
                      ],
                      "allow_merge_on_skipped_pipeline": "bool",
                      "analytics_access_level": "string",
                      "approvals_before_merge": "number",
                      "archived": "bool",
                      "auto_cancel_pending_pipelines": "string",
                      "auto_devops_deploy_strategy": "string",
                      "auto_devops_enabled": "bool",
                      "autoclose_referenced_issues": "bool",
                      "avatar_url": "string",
                      "build_coverage_regex": "string",
                      "build_git_strategy": "string",
                      "build_timeout": "number",
                      "builds_access_level": "string",
                      "ci_config_path": "string",
                      "ci_default_git_depth": "number",
                      "ci_forward_deployment_enabled": "bool",
                      "container_expiration_policy": [
                        "list",
                        [
                          "object",
                          {
                            "cadence": "string",
                            "enabled": "bool",
                            "keep_n": "number",
                            "name_regex_delete": "string",
                            "name_regex_keep": "string",
                            "next_run_at": "string",
                            "older_than": "string"
                          }
                        ]
                      ],
                      "container_registry_access_level": "string",
                      "container_registry_enabled": "bool",
                      "created_at": "string",
                      "creator_id": "number",
                      "custom_attributes": [
                        "list",
                        [
                          "map",
                          "string"
                        ]
                      ],
                      "default_branch": "string",
                      "description": "string",
                      "emails_disabled": "bool",
                      "external_authorization_classification_label": "string",
                      "forked_from_project": [
                        "list",
                        [
                          "object",
                          {
                            "http_url_to_repo": "string",
                            "id": "number",
                            "name": "string",
                            "name_with_namespace": "string",
                            "path": "string",
                            "path_with_namespace": "string",
                            "web_url": "string"
                          }
                        ]
                      ],
                      "forking_access_level": "string",
                      "forks_count": "number",
                      "http_url_to_repo": "string",
                      "id": "number",
                      "import_error": "string",
                      "import_status": "string",
                      "import_url": "string",
                      "issues_access_level": "string",
                      "issues_enabled": "bool",
                      "jobs_enabled": "bool",
                      "last_activity_at": "string",
                      "lfs_enabled": "bool",
                      "merge_commit_template": "string",
                      "merge_method": "string",
                      "merge_pipelines_enabled": "bool",
                      "merge_requests_access_level": "string",
                      "merge_requests_enabled": "bool",
                      "merge_trains_enabled": "bool",
                      "mirror": "bool",
                      "mirror_overwrites_diverged_branches": "bool",
                      "mirror_trigger_builds": "bool",
                      "mirror_user_id": "number",
                      "name": "string",
                      "name_with_namespace": "string",
                      "namespace": [
                        "list",
                        [
                          "object",
                          {
                            "full_path": "string",
                            "id": "number",
                            "kind": "string",
                            "name": "string",
                            "path": "string"
                          }
                        ]
                      ],
                      "only_allow_merge_if_all_discussions_are_resolved": "bool",
                      "only_allow_merge_if_pipeline_succeeds": "bool",
                      "only_mirror_protected_branches": "bool",
                      "open_issues_count": "number",
                      "operations_access_level": "string",
                      "owner": [
                        "list",
                        [
                          "object",
                          {
                            "avatar_url": "string",
                            "id": "number",
                            "name": "string",
                            "state": "string",
                            "username": "string",
                            "website_url": "string"
                          }
                        ]
                      ],
                      "packages_enabled": "bool",
                      "path": "string",
                      "path_with_namespace": "string",
                      "permissions": [
                        "list",
                        [
                          "object",
                          {
                            "group_access": [
                              "map",
                              "number"
                            ],
                            "project_access": [
                              "map",
                              "number"
                            ]
                          }
                        ]
                      ],
                      "public": "bool",
                      "public_builds": "bool",
                      "readme_url": "string",
                      "repository_access_level": "string",
                      "repository_storage": "string",
                      "request_access_enabled": "bool",
                      "requirements_access_level": "string",
                      "resolve_outdated_diff_discussions": "bool",
                      "restrict_user_defined_variables": "bool",
                      "runners_token": "string",
                      "security_and_compliance_access_level": "string",
                      "shared_runners_enabled": "bool",
                      "shared_with_groups": [
                        "list",
                        [
                          "object",
                          {
                            "group_access_level": "string",
                            "group_id": "number",
                            "group_name": "string"
                          }
                        ]
                      ],
                      "snippets_access_level": "string",
                      "snippets_enabled": "bool",
                      "squash_commit_template": "string",
                      "ssh_url_to_repo": "string",
                      "star_count": "number",
                      "statistics": [
                        "map",
                        "number"
                      ],
                      "suggestion_commit_message": "string",
                      "tag_list": [
                        "set",
                        "string"
                      ],
                      "topics": [
                        "set",
                        "string"
                      ],
                      "visibility": "string",
                      "web_url": "string",
                      "wiki_access_level": "string",
                      "wiki_enabled": "bool"
                    }
                  ]
                ],
                "description": "A list containing the projects matching the supplied arguments",
                "description_kind": "markdown",
                "computed": true
              },
              "search": {
                "type": "string",
                "description": "Return list of authorized projects matching the search criteria.",
                "description_kind": "markdown",
                "optional": true
              },
              "simple": {
                "type": "bool",
                "description": "Return only the ID, URL, name, and path of each project.",
                "description_kind": "markdown",
                "optional": true
              },
              "sort": {
                "type": "string",
                "description": "Return projects sorted in `asc` or `desc` order. Default is `desc`.",
                "description_kind": "markdown",
                "optional": true
              },
              "starred": {
                "type": "bool",
                "description": "Limit by projects starred by the current user.",
                "description_kind": "markdown",
                "optional": true
              },
              "statistics": {
                "type": "bool",
                "description": "Include project statistics. Cannot be used with `group_id`.",
                "description_kind": "markdown",
                "optional": true
              },
              "visibility": {
                "type": "string",
                "description": "Limit by visibility `public`, `internal`, or `private`.",
                "description_kind": "markdown",
                "optional": true
              },
              "with_custom_attributes": {
                "type": "bool",
                "description": "Include custom attributes in response _(admins only)_.",
                "description_kind": "markdown",
                "optional": true
              },
              "with_issues_enabled": {
                "type": "bool",
                "description": "Limit by projects with issues feature enabled. Default is `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "with_merge_requests_enabled": {
                "type": "bool",
                "description": "Limit by projects with merge requests feature enabled. Default is `false`.",
                "description_kind": "markdown",
                "optional": true
              },
              "with_programming_language": {
                "type": "string",
                "description": "Limit by projects which use the given programming language. Cannot be used with `group_id`.",
                "description_kind": "markdown",
                "optional": true
              },
              "with_shared": {
                "type": "bool",
                "description": "Include projects shared to this group. Default is `true`. Needs `group_id`.",
                "description_kind": "markdown",
                "optional": true
              }
            },
            "description": "The `gitlab_projects` data source allows details of multiple projects to be retrieved. Optionally filtered by the set attributes.\n\n-> This data source supports all available filters exposed by the xanzy/go-gitlab package, which might not expose all available filters exposed by the Gitlab APIs.\n\n-> The [owner sub-attributes](#nestedobjatt--projects--owner) are only populated if the Gitlab token used has an administrator scope.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/projects.html#list-all-projects)",
            "description_kind": "markdown"
          }
        },
        "gitlab_release_link": {
          "version": 0,
          "block": {
            "attributes": {
              "direct_asset_url": {
                "type": "string",
                "description": "Full path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).",
                "description_kind": "markdown",
                "computed": true
              },
              "external": {
                "type": "bool",
                "description": "External or internal link.",
                "description_kind": "markdown",
                "computed": true
              },
              "filepath": {
                "type": "string",
                "description": "Relative path for a [Direct Asset link](https://docs.gitlab.com/ee/user/project/releases/index.html#permanent-links-to-release-assets).",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "link_id": {
                "type": "number",
                "description": "The ID of the link.",
                "description_kind": "markdown",
                "required": true
              },
              "link_type": {
                "type": "string",
                "description": "The type of the link. Valid values are `other`, `runbook`, `image`, `package`. Defaults to other.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the link. Link names must be unique within the release.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The ID or [URL-encoded path of the project](https://docs.gitlab.com/ee/api/index.html#namespaced-path-encoding).",
                "description_kind": "markdown",
                "required": true
              },
              "tag_name": {
                "type": "string",
                "description": "The tag associated with the Release.",
                "description_kind": "markdown",
                "required": true
              },
              "url": {
                "type": "string",
                "description": "The URL of the link. Link URLs must be unique within the release.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_release_link` data source allows get details of a release link.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_release_links": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The ID or full path to the project.",
                "description_kind": "markdown",
                "required": true
              },
              "release_links": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "direct_asset_url": "string",
                      "external": "bool",
                      "filepath": "string",
                      "link_id": "number",
                      "link_type": "string",
                      "name": "string",
                      "project": "string",
                      "tag_name": "string",
                      "url": "string"
                    }
                  ]
                ],
                "description": "List of release links",
                "description_kind": "markdown",
                "computed": true
              },
              "tag_name": {
                "type": "string",
                "description": "The tag associated with the Release.",
                "description_kind": "markdown",
                "required": true
              }
            },
            "description": "The `gitlab_release_links` data source allows get details of release links.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/releases/links.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_repository_file": {
          "version": 0,
          "block": {
            "attributes": {
              "blob_id": {
                "type": "string",
                "description": "The blob id.",
                "description_kind": "markdown",
                "computed": true
              },
              "commit_id": {
                "type": "string",
                "description": "The commit id.",
                "description_kind": "markdown",
                "computed": true
              },
              "content": {
                "type": "string",
                "description": "File content. If the content is not yet base64 encoded, it will be encoded automatically. No other encoding is currently supported, because of a [GitLab API bug](https://gitlab.com/gitlab-org/gitlab/-/issues/342430).",
                "description_kind": "markdown",
                "computed": true
              },
              "content_sha256": {
                "type": "string",
                "description": "File content sha256 digest.",
                "description_kind": "markdown",
                "computed": true
              },
              "encoding": {
                "type": "string",
                "description": "The file content encoding.",
                "description_kind": "markdown",
                "computed": true
              },
              "execute_filemode": {
                "type": "bool",
                "description": "Enables or disables the execute flag on the file. **Note**: requires GitLab 14.10 or newer.",
                "description_kind": "markdown",
                "computed": true
              },
              "file_name": {
                "type": "string",
                "description": "The filename.",
                "description_kind": "markdown",
                "computed": true
              },
              "file_path": {
                "type": "string",
                "description": "The full path of the file. It must be relative to the root of the project without a leading slash `/`.",
                "description_kind": "markdown",
                "required": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "last_commit_id": {
                "type": "string",
                "description": "The last known commit id.",
                "description_kind": "markdown",
                "computed": true
              },
              "project": {
                "type": "string",
                "description": "The name or ID of the project.",
                "description_kind": "markdown",
                "required": true
              },
              "ref": {
                "type": "string",
                "description": "The name of branch, tag or commit.",
                "description_kind": "markdown",
                "required": true
              },
              "size": {
                "type": "number",
                "description": "The file size.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_repository_file` data source allows details of a file in a repository to be retrieved.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repository_files.html)",
            "description_kind": "markdown"
          }
        },
        "gitlab_repository_tree": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "path": {
                "type": "string",
                "description": "The path inside repository. Used to get content of subdirectories.",
                "description_kind": "markdown",
                "optional": true
              },
              "project": {
                "type": "string",
                "description": "The ID or full path of the project owned by the authenticated user.",
                "description_kind": "markdown",
                "required": true
              },
              "recursive": {
                "type": "bool",
                "description": "Boolean value used to get a recursive tree (false by default).",
                "description_kind": "markdown",
                "optional": true
              },
              "ref": {
                "type": "string",
                "description": "The name of a repository branch or tag.",
                "description_kind": "markdown",
                "required": true
              },
              "tree": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "id": "string",
                      "mode": "string",
                      "name": "string",
                      "path": "string",
                      "type": "string"
                    }
                  ]
                ],
                "description": "The list of files/directories returned by the search",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_repository_tree` data source allows details of directories and files in a repository to be retrieved.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/repositories.html#list-repository-tree)",
            "description_kind": "markdown"
          }
        },
        "gitlab_user": {
          "version": 0,
          "block": {
            "attributes": {
              "avatar_url": {
                "type": "string",
                "description": "The avatar URL of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "bio": {
                "type": "string",
                "description": "The bio of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "can_create_group": {
                "type": "bool",
                "description": "Whether the user can create groups.",
                "description_kind": "markdown",
                "computed": true
              },
              "can_create_project": {
                "type": "bool",
                "description": "Whether the user can create projects.",
                "description_kind": "markdown",
                "computed": true
              },
              "color_scheme_id": {
                "type": "number",
                "description": "User's color scheme ID.",
                "description_kind": "markdown",
                "computed": true
              },
              "created_at": {
                "type": "string",
                "description": "Date the user was created at.",
                "description_kind": "markdown",
                "computed": true
              },
              "current_sign_in_at": {
                "type": "string",
                "description": "Current user's sign-in date.",
                "description_kind": "markdown",
                "computed": true
              },
              "email": {
                "type": "string",
                "description": "The public email address of the user. **Note**: before GitLab 14.8 the lookup was based on the users primary email address.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "extern_uid": {
                "type": "string",
                "description": "The external UID of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "external": {
                "type": "bool",
                "description": "Whether the user is external.",
                "description_kind": "markdown",
                "computed": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "is_admin": {
                "type": "bool",
                "description": "Whether the user is an admin.",
                "description_kind": "markdown",
                "computed": true
              },
              "last_sign_in_at": {
                "type": "string",
                "description": "Last user's sign-in date.",
                "description_kind": "markdown",
                "computed": true
              },
              "linkedin": {
                "type": "string",
                "description": "LinkedIn profile of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "location": {
                "type": "string",
                "description": "The location of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "name": {
                "type": "string",
                "description": "The name of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "namespace_id": {
                "type": "number",
                "description": "The ID of the user's namespace. Requires admin token to access this field. Available since GitLab 14.10.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "note": {
                "type": "string",
                "description": "Admin notes for this user.",
                "description_kind": "markdown",
                "computed": true
              },
              "organization": {
                "type": "string",
                "description": "The organization of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "projects_limit": {
                "type": "number",
                "description": "Number of projects the user can create.",
                "description_kind": "markdown",
                "computed": true
              },
              "skype": {
                "type": "string",
                "description": "Skype username of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "state": {
                "type": "string",
                "description": "Whether the user is active or blocked.",
                "description_kind": "markdown",
                "computed": true
              },
              "theme_id": {
                "type": "number",
                "description": "User's theme ID.",
                "description_kind": "markdown",
                "computed": true
              },
              "twitter": {
                "type": "string",
                "description": "Twitter username of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "two_factor_enabled": {
                "type": "bool",
                "description": "Whether user's two-factor auth is enabled.",
                "description_kind": "markdown",
                "computed": true
              },
              "user_id": {
                "type": "number",
                "description": "The ID of the user.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "user_provider": {
                "type": "string",
                "description": "The UID provider of the user.",
                "description_kind": "markdown",
                "computed": true
              },
              "username": {
                "type": "string",
                "description": "The username of the user.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "website_url": {
                "type": "string",
                "description": "User's website URL.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_user` data source allows details of a user to be retrieved by either the user ID, username or email address.\n\n-> Some attributes might not be returned depending on if you're an admin or not.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#single-user)",
            "description_kind": "markdown"
          }
        },
        "gitlab_user_sshkeys": {
          "version": 0,
          "block": {
            "attributes": {
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "keys": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "created_at": "string",
                      "expires_at": "string",
                      "key": "string",
                      "key_id": "number",
                      "title": "string",
                      "user_id": "number"
                    }
                  ]
                ],
                "description": "The user's keys.",
                "description_kind": "markdown",
                "computed": true
              },
              "user_id": {
                "type": "number",
                "description": "ID of the user to get the SSH keys for.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              },
              "username": {
                "type": "string",
                "description": "Username of the user to get the SSH keys for.",
                "description_kind": "markdown",
                "optional": true,
                "computed": true
              }
            },
            "description": "The `gitlab_user_sshkeys` data source allows a list of SSH keys to be retrieved by either the user ID or username.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user)",
            "description_kind": "markdown"
          }
        },
        "gitlab_users": {
          "version": 0,
          "block": {
            "attributes": {
              "active": {
                "type": "bool",
                "description": "Filter users that are active.",
                "description_kind": "markdown",
                "optional": true
              },
              "blocked": {
                "type": "bool",
                "description": "Filter users that are blocked.",
                "description_kind": "markdown",
                "optional": true
              },
              "created_after": {
                "type": "string",
                "description": "Search for users created after a specific date. (Requires administrator privileges)",
                "description_kind": "markdown",
                "optional": true
              },
              "created_before": {
                "type": "string",
                "description": "Search for users created before a specific date. (Requires administrator privileges)",
                "description_kind": "markdown",
                "optional": true
              },
              "extern_provider": {
                "type": "string",
                "description": "Lookup users by external provider. (Requires administrator privileges)",
                "description_kind": "markdown",
                "optional": true
              },
              "extern_uid": {
                "type": "string",
                "description": "Lookup users by external UID. (Requires administrator privileges)",
                "description_kind": "markdown",
                "optional": true
              },
              "id": {
                "type": "string",
                "description_kind": "plain",
                "optional": true,
                "computed": true
              },
              "order_by": {
                "type": "string",
                "description": "Order the users' list by `id`, `name`, `username`, `created_at` or `updated_at`. (Requires administrator privileges)",
                "description_kind": "markdown",
                "optional": true
              },
              "search": {
                "type": "string",
                "description": "Search users by username, name or email.",
                "description_kind": "markdown",
                "optional": true
              },
              "sort": {
                "type": "string",
                "description": "Sort users' list in asc or desc order. (Requires administrator privileges)",
                "description_kind": "markdown",
                "optional": true
              },
              "users": {
                "type": [
                  "list",
                  [
                    "object",
                    {
                      "avatar_url": "string",
                      "bio": "string",
                      "can_create_group": "bool",
                      "can_create_project": "bool",
                      "color_scheme_id": "number",
                      "created_at": "string",
                      "current_sign_in_at": "string",
                      "email": "string",
                      "extern_uid": "string",
                      "external": "bool",
                      "id": "number",
                      "is_admin": "bool",
                      "last_sign_in_at": "string",
                      "linkedin": "string",
                      "location": "string",
                      "name": "string",
                      "namespace_id": "number",
                      "organization": "string",
                      "projects_limit": "number",
                      "provider": "string",
                      "skype": "string",
                      "state": "string",
                      "theme_id": "number",
                      "twitter": "string",
                      "two_factor_enabled": "bool",
                      "username": "string",
                      "website_url": "string"
                    }
                  ]
                ],
                "description": "The list of users.",
                "description_kind": "markdown",
                "computed": true
              }
            },
            "description": "The `gitlab_users` data source allows details of multiple users to be retrieved given some optional filter criteria.\n\n-> Some attributes might not be returned depending on if you're an admin or not.\n\n-> Some available options require administrator privileges.\n\n**Upstream API**: [GitLab REST API docs](https://docs.gitlab.com/ce/api/users.html#list-users)",
            "description_kind": "markdown"
          }
        }
      }
    }
  }
}
